/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.mongo.driver.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzWriteResult implements org.apache.thrift.TBase<EzWriteResult, EzWriteResult._Fields>, java.io.Serializable, Cloneable, Comparable<EzWriteResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EzWriteResult");

  private static final org.apache.thrift.protocol.TField WRITE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("writeResult", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MONGOEXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoexception", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EzWriteResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EzWriteResultTupleSchemeFactory());
  }

  public ByteBuffer writeResult; // required
  public ByteBuffer mongoexception; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WRITE_RESULT((short)1, "writeResult"),
    MONGOEXCEPTION((short)2, "mongoexception");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WRITE_RESULT
          return WRITE_RESULT;
        case 2: // MONGOEXCEPTION
          return MONGOEXCEPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MONGOEXCEPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WRITE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("writeResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MONGOEXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mongoexception", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EzWriteResult.class, metaDataMap);
  }

  public EzWriteResult() {
  }

  public EzWriteResult(
    ByteBuffer writeResult)
  {
    this();
    this.writeResult = writeResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EzWriteResult(EzWriteResult other) {
    if (other.isSetWriteResult()) {
      this.writeResult = org.apache.thrift.TBaseHelper.copyBinary(other.writeResult);
;
    }
    if (other.isSetMongoexception()) {
      this.mongoexception = org.apache.thrift.TBaseHelper.copyBinary(other.mongoexception);
;
    }
  }

  public EzWriteResult deepCopy() {
    return new EzWriteResult(this);
  }

  @Override
  public void clear() {
    this.writeResult = null;
    this.mongoexception = null;
  }

  public byte[] getWriteResult() {
    setWriteResult(org.apache.thrift.TBaseHelper.rightSize(writeResult));
    return writeResult == null ? null : writeResult.array();
  }

  public ByteBuffer bufferForWriteResult() {
    return writeResult;
  }

  public EzWriteResult setWriteResult(byte[] writeResult) {
    setWriteResult(writeResult == null ? (ByteBuffer)null : ByteBuffer.wrap(writeResult));
    return this;
  }

  public EzWriteResult setWriteResult(ByteBuffer writeResult) {
    this.writeResult = writeResult;
    return this;
  }

  public void unsetWriteResult() {
    this.writeResult = null;
  }

  /** Returns true if field writeResult is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteResult() {
    return this.writeResult != null;
  }

  public void setWriteResultIsSet(boolean value) {
    if (!value) {
      this.writeResult = null;
    }
  }

  public byte[] getMongoexception() {
    setMongoexception(org.apache.thrift.TBaseHelper.rightSize(mongoexception));
    return mongoexception == null ? null : mongoexception.array();
  }

  public ByteBuffer bufferForMongoexception() {
    return mongoexception;
  }

  public EzWriteResult setMongoexception(byte[] mongoexception) {
    setMongoexception(mongoexception == null ? (ByteBuffer)null : ByteBuffer.wrap(mongoexception));
    return this;
  }

  public EzWriteResult setMongoexception(ByteBuffer mongoexception) {
    this.mongoexception = mongoexception;
    return this;
  }

  public void unsetMongoexception() {
    this.mongoexception = null;
  }

  /** Returns true if field mongoexception is set (has been assigned a value) and false otherwise */
  public boolean isSetMongoexception() {
    return this.mongoexception != null;
  }

  public void setMongoexceptionIsSet(boolean value) {
    if (!value) {
      this.mongoexception = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WRITE_RESULT:
      if (value == null) {
        unsetWriteResult();
      } else {
        setWriteResult((ByteBuffer)value);
      }
      break;

    case MONGOEXCEPTION:
      if (value == null) {
        unsetMongoexception();
      } else {
        setMongoexception((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WRITE_RESULT:
      return getWriteResult();

    case MONGOEXCEPTION:
      return getMongoexception();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WRITE_RESULT:
      return isSetWriteResult();
    case MONGOEXCEPTION:
      return isSetMongoexception();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EzWriteResult)
      return this.equals((EzWriteResult)that);
    return false;
  }

  public boolean equals(EzWriteResult that) {
    if (that == null)
      return false;

    boolean this_present_writeResult = true && this.isSetWriteResult();
    boolean that_present_writeResult = true && that.isSetWriteResult();
    if (this_present_writeResult || that_present_writeResult) {
      if (!(this_present_writeResult && that_present_writeResult))
        return false;
      if (!this.writeResult.equals(that.writeResult))
        return false;
    }

    boolean this_present_mongoexception = true && this.isSetMongoexception();
    boolean that_present_mongoexception = true && that.isSetMongoexception();
    if (this_present_mongoexception || that_present_mongoexception) {
      if (!(this_present_mongoexception && that_present_mongoexception))
        return false;
      if (!this.mongoexception.equals(that.mongoexception))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_writeResult = true && (isSetWriteResult());
    builder.append(present_writeResult);
    if (present_writeResult)
      builder.append(writeResult);

    boolean present_mongoexception = true && (isSetMongoexception());
    builder.append(present_mongoexception);
    if (present_mongoexception)
      builder.append(mongoexception);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(EzWriteResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWriteResult()).compareTo(other.isSetWriteResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeResult, other.writeResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMongoexception()).compareTo(other.isSetMongoexception());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMongoexception()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoexception, other.mongoexception);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EzWriteResult(");
    boolean first = true;

    sb.append("writeResult:");
    if (this.writeResult == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.writeResult, sb);
    }
    first = false;
    if (isSetMongoexception()) {
      if (!first) sb.append(", ");
      sb.append("mongoexception:");
      if (this.mongoexception == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.mongoexception, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EzWriteResultStandardSchemeFactory implements SchemeFactory {
    public EzWriteResultStandardScheme getScheme() {
      return new EzWriteResultStandardScheme();
    }
  }

  private static class EzWriteResultStandardScheme extends StandardScheme<EzWriteResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EzWriteResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WRITE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.writeResult = iprot.readBinary();
              struct.setWriteResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONGOEXCEPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mongoexception = iprot.readBinary();
              struct.setMongoexceptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EzWriteResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.writeResult != null) {
        oprot.writeFieldBegin(WRITE_RESULT_FIELD_DESC);
        oprot.writeBinary(struct.writeResult);
        oprot.writeFieldEnd();
      }
      if (struct.mongoexception != null) {
        if (struct.isSetMongoexception()) {
          oprot.writeFieldBegin(MONGOEXCEPTION_FIELD_DESC);
          oprot.writeBinary(struct.mongoexception);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EzWriteResultTupleSchemeFactory implements SchemeFactory {
    public EzWriteResultTupleScheme getScheme() {
      return new EzWriteResultTupleScheme();
    }
  }

  private static class EzWriteResultTupleScheme extends TupleScheme<EzWriteResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EzWriteResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWriteResult()) {
        optionals.set(0);
      }
      if (struct.isSetMongoexception()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWriteResult()) {
        oprot.writeBinary(struct.writeResult);
      }
      if (struct.isSetMongoexception()) {
        oprot.writeBinary(struct.mongoexception);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EzWriteResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.writeResult = iprot.readBinary();
        struct.setWriteResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mongoexception = iprot.readBinary();
        struct.setMongoexceptionIsSet(true);
      }
    }
  }

}

