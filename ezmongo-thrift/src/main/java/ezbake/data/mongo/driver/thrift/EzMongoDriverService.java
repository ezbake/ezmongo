/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.mongo.driver.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzMongoDriverService {

  public interface Iface extends ezbake.data.mongo.thrift.EzMongo.Iface {

    public boolean authenticate_driver(ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    public ResultsWrapper find_driver(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public ResultsWrapper aggregate_driver(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzWriteResult insert_driver(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzWriteResult update_driver(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public ResultsWrapper drop_driver(String collection, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzWriteResult createIndex_driver(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzGetMoreResponse getMore_driver(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzParallelScanResponse parallelScan_driver(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public EzWriteResult remove_driver(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

    public int getMaxBsonObjectSize_driver(ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.data.mongo.thrift.EzMongo .AsyncIface {

    public void authenticate_driver(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void find_driver(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void aggregate_driver(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insert_driver(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_driver(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void drop_driver(String collection, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createIndex_driver(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMore_driver(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void parallelScan_driver(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void remove_driver(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMaxBsonObjectSize_driver(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.data.mongo.thrift.EzMongo.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean authenticate_driver(ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_authenticate_driver(security);
      return recv_authenticate_driver();
    }

    public void send_authenticate_driver(ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      authenticate_driver_args args = new authenticate_driver_args();
      args.setSecurity(security);
      sendBase("authenticate_driver", args);
    }

    public boolean recv_authenticate_driver() throws org.apache.thrift.TException
    {
      authenticate_driver_result result = new authenticate_driver_result();
      receiveBase(result, "authenticate_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticate_driver failed: unknown result");
    }

    public ResultsWrapper find_driver(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_find_driver(collection, request, security);
      return recv_find_driver();
    }

    public void send_find_driver(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      find_driver_args args = new find_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("find_driver", args);
    }

    public ResultsWrapper recv_find_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      find_driver_result result = new find_driver_result();
      receiveBase(result, "find_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "find_driver failed: unknown result");
    }

    public ResultsWrapper aggregate_driver(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_aggregate_driver(collection, request, security);
      return recv_aggregate_driver();
    }

    public void send_aggregate_driver(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      aggregate_driver_args args = new aggregate_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("aggregate_driver", args);
    }

    public ResultsWrapper recv_aggregate_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      aggregate_driver_result result = new aggregate_driver_result();
      receiveBase(result, "aggregate_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "aggregate_driver failed: unknown result");
    }

    public EzWriteResult insert_driver(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_insert_driver(collection, request, security);
      return recv_insert_driver();
    }

    public void send_insert_driver(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      insert_driver_args args = new insert_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("insert_driver", args);
    }

    public EzWriteResult recv_insert_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      insert_driver_result result = new insert_driver_result();
      receiveBase(result, "insert_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insert_driver failed: unknown result");
    }

    public EzWriteResult update_driver(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_update_driver(collection, request, security);
      return recv_update_driver();
    }

    public void send_update_driver(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      update_driver_args args = new update_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("update_driver", args);
    }

    public EzWriteResult recv_update_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      update_driver_result result = new update_driver_result();
      receiveBase(result, "update_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_driver failed: unknown result");
    }

    public ResultsWrapper drop_driver(String collection, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_drop_driver(collection, security);
      return recv_drop_driver();
    }

    public void send_drop_driver(String collection, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      drop_driver_args args = new drop_driver_args();
      args.setCollection(collection);
      args.setSecurity(security);
      sendBase("drop_driver", args);
    }

    public ResultsWrapper recv_drop_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      drop_driver_result result = new drop_driver_result();
      receiveBase(result, "drop_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "drop_driver failed: unknown result");
    }

    public EzWriteResult createIndex_driver(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_createIndex_driver(collection, request, security);
      return recv_createIndex_driver();
    }

    public void send_createIndex_driver(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      createIndex_driver_args args = new createIndex_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("createIndex_driver", args);
    }

    public EzWriteResult recv_createIndex_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      createIndex_driver_result result = new createIndex_driver_result();
      receiveBase(result, "createIndex_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createIndex_driver failed: unknown result");
    }

    public EzGetMoreResponse getMore_driver(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_getMore_driver(collection, request, security);
      return recv_getMore_driver();
    }

    public void send_getMore_driver(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getMore_driver_args args = new getMore_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("getMore_driver", args);
    }

    public EzGetMoreResponse recv_getMore_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      getMore_driver_result result = new getMore_driver_result();
      receiveBase(result, "getMore_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMore_driver failed: unknown result");
    }

    public EzParallelScanResponse parallelScan_driver(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_parallelScan_driver(collection, options, security);
      return recv_parallelScan_driver();
    }

    public void send_parallelScan_driver(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      parallelScan_driver_args args = new parallelScan_driver_args();
      args.setCollection(collection);
      args.setOptions(options);
      args.setSecurity(security);
      sendBase("parallelScan_driver", args);
    }

    public EzParallelScanResponse recv_parallelScan_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      parallelScan_driver_result result = new parallelScan_driver_result();
      receiveBase(result, "parallelScan_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parallelScan_driver failed: unknown result");
    }

    public EzWriteResult remove_driver(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_remove_driver(collection, request, security);
      return recv_remove_driver();
    }

    public void send_remove_driver(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      remove_driver_args args = new remove_driver_args();
      args.setCollection(collection);
      args.setRequest(request);
      args.setSecurity(security);
      sendBase("remove_driver", args);
    }

    public EzWriteResult recv_remove_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      remove_driver_result result = new remove_driver_result();
      receiveBase(result, "remove_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "remove_driver failed: unknown result");
    }

    public int getMaxBsonObjectSize_driver(ezbake.base.thrift.EzSecurityToken security) throws EzMongoDriverException, org.apache.thrift.TException
    {
      send_getMaxBsonObjectSize_driver(security);
      return recv_getMaxBsonObjectSize_driver();
    }

    public void send_getMaxBsonObjectSize_driver(ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getMaxBsonObjectSize_driver_args args = new getMaxBsonObjectSize_driver_args();
      args.setSecurity(security);
      sendBase("getMaxBsonObjectSize_driver", args);
    }

    public int recv_getMaxBsonObjectSize_driver() throws EzMongoDriverException, org.apache.thrift.TException
    {
      getMaxBsonObjectSize_driver_result result = new getMaxBsonObjectSize_driver_result();
      receiveBase(result, "getMaxBsonObjectSize_driver");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EzMongoDriverException != null) {
        throw result.EzMongoDriverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMaxBsonObjectSize_driver failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.data.mongo.thrift.EzMongo.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticate_driver(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticate_driver_call method_call = new authenticate_driver_call(security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticate_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken security;
      public authenticate_driver_call(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticate_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticate_driver_args args = new authenticate_driver_args();
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticate_driver();
      }
    }

    public void find_driver(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      find_driver_call method_call = new find_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class find_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzFindRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public find_driver_call(String collection, EzFindRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("find_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        find_driver_args args = new find_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultsWrapper getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_find_driver();
      }
    }

    public void aggregate_driver(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      aggregate_driver_call method_call = new aggregate_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class aggregate_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzAggregationRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public aggregate_driver_call(String collection, EzAggregationRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("aggregate_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        aggregate_driver_args args = new aggregate_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultsWrapper getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_aggregate_driver();
      }
    }

    public void insert_driver(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_driver_call method_call = new insert_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insert_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzInsertRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public insert_driver_call(String collection, EzInsertRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_driver_args args = new insert_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzWriteResult getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insert_driver();
      }
    }

    public void update_driver(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_driver_call method_call = new update_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzUpdateRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public update_driver_call(String collection, EzUpdateRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_driver_args args = new update_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzWriteResult getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_driver();
      }
    }

    public void drop_driver(String collection, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drop_driver_call method_call = new drop_driver_call(collection, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private ezbake.base.thrift.EzSecurityToken security;
      public drop_driver_call(String collection, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drop_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drop_driver_args args = new drop_driver_args();
        args.setCollection(collection);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultsWrapper getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_drop_driver();
      }
    }

    public void createIndex_driver(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createIndex_driver_call method_call = new createIndex_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createIndex_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzCreateIndexRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public createIndex_driver_call(String collection, EzCreateIndexRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createIndex_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createIndex_driver_args args = new createIndex_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzWriteResult getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createIndex_driver();
      }
    }

    public void getMore_driver(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMore_driver_call method_call = new getMore_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMore_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzGetMoreRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public getMore_driver_call(String collection, EzGetMoreRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMore_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMore_driver_args args = new getMore_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzGetMoreResponse getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMore_driver();
      }
    }

    public void parallelScan_driver(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parallelScan_driver_call method_call = new parallelScan_driver_call(collection, options, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parallelScan_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzParallelScanOptions options;
      private ezbake.base.thrift.EzSecurityToken security;
      public parallelScan_driver_call(String collection, EzParallelScanOptions options, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.options = options;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parallelScan_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parallelScan_driver_args args = new parallelScan_driver_args();
        args.setCollection(collection);
        args.setOptions(options);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzParallelScanResponse getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parallelScan_driver();
      }
    }

    public void remove_driver(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_driver_call method_call = new remove_driver_call(collection, request, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collection;
      private EzRemoveRequest request;
      private ezbake.base.thrift.EzSecurityToken security;
      public remove_driver_call(String collection, EzRemoveRequest request, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collection = collection;
        this.request = request;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_driver_args args = new remove_driver_args();
        args.setCollection(collection);
        args.setRequest(request);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EzWriteResult getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_remove_driver();
      }
    }

    public void getMaxBsonObjectSize_driver(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMaxBsonObjectSize_driver_call method_call = new getMaxBsonObjectSize_driver_call(security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMaxBsonObjectSize_driver_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken security;
      public getMaxBsonObjectSize_driver_call(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMaxBsonObjectSize_driver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMaxBsonObjectSize_driver_args args = new getMaxBsonObjectSize_driver_args();
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws EzMongoDriverException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMaxBsonObjectSize_driver();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.data.mongo.thrift.EzMongo.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("authenticate_driver", new authenticate_driver());
      processMap.put("find_driver", new find_driver());
      processMap.put("aggregate_driver", new aggregate_driver());
      processMap.put("insert_driver", new insert_driver());
      processMap.put("update_driver", new update_driver());
      processMap.put("drop_driver", new drop_driver());
      processMap.put("createIndex_driver", new createIndex_driver());
      processMap.put("getMore_driver", new getMore_driver());
      processMap.put("parallelScan_driver", new parallelScan_driver());
      processMap.put("remove_driver", new remove_driver());
      processMap.put("getMaxBsonObjectSize_driver", new getMaxBsonObjectSize_driver());
      return processMap;
    }

    public static class authenticate_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticate_driver_args> {
      public authenticate_driver() {
        super("authenticate_driver");
      }

      public authenticate_driver_args getEmptyArgsInstance() {
        return new authenticate_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticate_driver_result getResult(I iface, authenticate_driver_args args) throws org.apache.thrift.TException {
        authenticate_driver_result result = new authenticate_driver_result();
        result.success = iface.authenticate_driver(args.security);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class find_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, find_driver_args> {
      public find_driver() {
        super("find_driver");
      }

      public find_driver_args getEmptyArgsInstance() {
        return new find_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public find_driver_result getResult(I iface, find_driver_args args) throws org.apache.thrift.TException {
        find_driver_result result = new find_driver_result();
        try {
          result.success = iface.find_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class aggregate_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, aggregate_driver_args> {
      public aggregate_driver() {
        super("aggregate_driver");
      }

      public aggregate_driver_args getEmptyArgsInstance() {
        return new aggregate_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public aggregate_driver_result getResult(I iface, aggregate_driver_args args) throws org.apache.thrift.TException {
        aggregate_driver_result result = new aggregate_driver_result();
        try {
          result.success = iface.aggregate_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class insert_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insert_driver_args> {
      public insert_driver() {
        super("insert_driver");
      }

      public insert_driver_args getEmptyArgsInstance() {
        return new insert_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insert_driver_result getResult(I iface, insert_driver_args args) throws org.apache.thrift.TException {
        insert_driver_result result = new insert_driver_result();
        try {
          result.success = iface.insert_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class update_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_driver_args> {
      public update_driver() {
        super("update_driver");
      }

      public update_driver_args getEmptyArgsInstance() {
        return new update_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_driver_result getResult(I iface, update_driver_args args) throws org.apache.thrift.TException {
        update_driver_result result = new update_driver_result();
        try {
          result.success = iface.update_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class drop_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drop_driver_args> {
      public drop_driver() {
        super("drop_driver");
      }

      public drop_driver_args getEmptyArgsInstance() {
        return new drop_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public drop_driver_result getResult(I iface, drop_driver_args args) throws org.apache.thrift.TException {
        drop_driver_result result = new drop_driver_result();
        try {
          result.success = iface.drop_driver(args.collection, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class createIndex_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createIndex_driver_args> {
      public createIndex_driver() {
        super("createIndex_driver");
      }

      public createIndex_driver_args getEmptyArgsInstance() {
        return new createIndex_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createIndex_driver_result getResult(I iface, createIndex_driver_args args) throws org.apache.thrift.TException {
        createIndex_driver_result result = new createIndex_driver_result();
        try {
          result.success = iface.createIndex_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class getMore_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMore_driver_args> {
      public getMore_driver() {
        super("getMore_driver");
      }

      public getMore_driver_args getEmptyArgsInstance() {
        return new getMore_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMore_driver_result getResult(I iface, getMore_driver_args args) throws org.apache.thrift.TException {
        getMore_driver_result result = new getMore_driver_result();
        try {
          result.success = iface.getMore_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class parallelScan_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parallelScan_driver_args> {
      public parallelScan_driver() {
        super("parallelScan_driver");
      }

      public parallelScan_driver_args getEmptyArgsInstance() {
        return new parallelScan_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parallelScan_driver_result getResult(I iface, parallelScan_driver_args args) throws org.apache.thrift.TException {
        parallelScan_driver_result result = new parallelScan_driver_result();
        try {
          result.success = iface.parallelScan_driver(args.collection, args.options, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class remove_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_driver_args> {
      public remove_driver() {
        super("remove_driver");
      }

      public remove_driver_args getEmptyArgsInstance() {
        return new remove_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public remove_driver_result getResult(I iface, remove_driver_args args) throws org.apache.thrift.TException {
        remove_driver_result result = new remove_driver_result();
        try {
          result.success = iface.remove_driver(args.collection, args.request, args.security);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

    public static class getMaxBsonObjectSize_driver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMaxBsonObjectSize_driver_args> {
      public getMaxBsonObjectSize_driver() {
        super("getMaxBsonObjectSize_driver");
      }

      public getMaxBsonObjectSize_driver_args getEmptyArgsInstance() {
        return new getMaxBsonObjectSize_driver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMaxBsonObjectSize_driver_result getResult(I iface, getMaxBsonObjectSize_driver_args args) throws org.apache.thrift.TException {
        getMaxBsonObjectSize_driver_result result = new getMaxBsonObjectSize_driver_result();
        try {
          result.success = iface.getMaxBsonObjectSize_driver(args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoDriverException EzMongoDriverException) {
          result.EzMongoDriverException = EzMongoDriverException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.data.mongo.thrift.EzMongo.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("authenticate_driver", new authenticate_driver());
      processMap.put("find_driver", new find_driver());
      processMap.put("aggregate_driver", new aggregate_driver());
      processMap.put("insert_driver", new insert_driver());
      processMap.put("update_driver", new update_driver());
      processMap.put("drop_driver", new drop_driver());
      processMap.put("createIndex_driver", new createIndex_driver());
      processMap.put("getMore_driver", new getMore_driver());
      processMap.put("parallelScan_driver", new parallelScan_driver());
      processMap.put("remove_driver", new remove_driver());
      processMap.put("getMaxBsonObjectSize_driver", new getMaxBsonObjectSize_driver());
      return processMap;
    }

    public static class authenticate_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticate_driver_args, Boolean> {
      public authenticate_driver() {
        super("authenticate_driver");
      }

      public authenticate_driver_args getEmptyArgsInstance() {
        return new authenticate_driver_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            authenticate_driver_result result = new authenticate_driver_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticate_driver_result result = new authenticate_driver_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticate_driver_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.authenticate_driver(args.security,resultHandler);
      }
    }

    public static class find_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, find_driver_args, ResultsWrapper> {
      public find_driver() {
        super("find_driver");
      }

      public find_driver_args getEmptyArgsInstance() {
        return new find_driver_args();
      }

      public AsyncMethodCallback<ResultsWrapper> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultsWrapper>() { 
          public void onComplete(ResultsWrapper o) {
            find_driver_result result = new find_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            find_driver_result result = new find_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, find_driver_args args, org.apache.thrift.async.AsyncMethodCallback<ResultsWrapper> resultHandler) throws TException {
        iface.find_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class aggregate_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, aggregate_driver_args, ResultsWrapper> {
      public aggregate_driver() {
        super("aggregate_driver");
      }

      public aggregate_driver_args getEmptyArgsInstance() {
        return new aggregate_driver_args();
      }

      public AsyncMethodCallback<ResultsWrapper> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultsWrapper>() { 
          public void onComplete(ResultsWrapper o) {
            aggregate_driver_result result = new aggregate_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            aggregate_driver_result result = new aggregate_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, aggregate_driver_args args, org.apache.thrift.async.AsyncMethodCallback<ResultsWrapper> resultHandler) throws TException {
        iface.aggregate_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class insert_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insert_driver_args, EzWriteResult> {
      public insert_driver() {
        super("insert_driver");
      }

      public insert_driver_args getEmptyArgsInstance() {
        return new insert_driver_args();
      }

      public AsyncMethodCallback<EzWriteResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzWriteResult>() { 
          public void onComplete(EzWriteResult o) {
            insert_driver_result result = new insert_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insert_driver_result result = new insert_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insert_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzWriteResult> resultHandler) throws TException {
        iface.insert_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class update_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_driver_args, EzWriteResult> {
      public update_driver() {
        super("update_driver");
      }

      public update_driver_args getEmptyArgsInstance() {
        return new update_driver_args();
      }

      public AsyncMethodCallback<EzWriteResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzWriteResult>() { 
          public void onComplete(EzWriteResult o) {
            update_driver_result result = new update_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_driver_result result = new update_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzWriteResult> resultHandler) throws TException {
        iface.update_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class drop_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, drop_driver_args, ResultsWrapper> {
      public drop_driver() {
        super("drop_driver");
      }

      public drop_driver_args getEmptyArgsInstance() {
        return new drop_driver_args();
      }

      public AsyncMethodCallback<ResultsWrapper> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultsWrapper>() { 
          public void onComplete(ResultsWrapper o) {
            drop_driver_result result = new drop_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            drop_driver_result result = new drop_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, drop_driver_args args, org.apache.thrift.async.AsyncMethodCallback<ResultsWrapper> resultHandler) throws TException {
        iface.drop_driver(args.collection, args.security,resultHandler);
      }
    }

    public static class createIndex_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createIndex_driver_args, EzWriteResult> {
      public createIndex_driver() {
        super("createIndex_driver");
      }

      public createIndex_driver_args getEmptyArgsInstance() {
        return new createIndex_driver_args();
      }

      public AsyncMethodCallback<EzWriteResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzWriteResult>() { 
          public void onComplete(EzWriteResult o) {
            createIndex_driver_result result = new createIndex_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createIndex_driver_result result = new createIndex_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createIndex_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzWriteResult> resultHandler) throws TException {
        iface.createIndex_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class getMore_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMore_driver_args, EzGetMoreResponse> {
      public getMore_driver() {
        super("getMore_driver");
      }

      public getMore_driver_args getEmptyArgsInstance() {
        return new getMore_driver_args();
      }

      public AsyncMethodCallback<EzGetMoreResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzGetMoreResponse>() { 
          public void onComplete(EzGetMoreResponse o) {
            getMore_driver_result result = new getMore_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMore_driver_result result = new getMore_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMore_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzGetMoreResponse> resultHandler) throws TException {
        iface.getMore_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class parallelScan_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parallelScan_driver_args, EzParallelScanResponse> {
      public parallelScan_driver() {
        super("parallelScan_driver");
      }

      public parallelScan_driver_args getEmptyArgsInstance() {
        return new parallelScan_driver_args();
      }

      public AsyncMethodCallback<EzParallelScanResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzParallelScanResponse>() { 
          public void onComplete(EzParallelScanResponse o) {
            parallelScan_driver_result result = new parallelScan_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            parallelScan_driver_result result = new parallelScan_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parallelScan_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzParallelScanResponse> resultHandler) throws TException {
        iface.parallelScan_driver(args.collection, args.options, args.security,resultHandler);
      }
    }

    public static class remove_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, remove_driver_args, EzWriteResult> {
      public remove_driver() {
        super("remove_driver");
      }

      public remove_driver_args getEmptyArgsInstance() {
        return new remove_driver_args();
      }

      public AsyncMethodCallback<EzWriteResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EzWriteResult>() { 
          public void onComplete(EzWriteResult o) {
            remove_driver_result result = new remove_driver_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            remove_driver_result result = new remove_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, remove_driver_args args, org.apache.thrift.async.AsyncMethodCallback<EzWriteResult> resultHandler) throws TException {
        iface.remove_driver(args.collection, args.request, args.security,resultHandler);
      }
    }

    public static class getMaxBsonObjectSize_driver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMaxBsonObjectSize_driver_args, Integer> {
      public getMaxBsonObjectSize_driver() {
        super("getMaxBsonObjectSize_driver");
      }

      public getMaxBsonObjectSize_driver_args getEmptyArgsInstance() {
        return new getMaxBsonObjectSize_driver_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getMaxBsonObjectSize_driver_result result = new getMaxBsonObjectSize_driver_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMaxBsonObjectSize_driver_result result = new getMaxBsonObjectSize_driver_result();
            if (e instanceof EzMongoDriverException) {
                        result.EzMongoDriverException = (EzMongoDriverException) e;
                        result.setEzMongoDriverExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMaxBsonObjectSize_driver_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getMaxBsonObjectSize_driver(args.security,resultHandler);
      }
    }

  }

  public static class authenticate_driver_args implements org.apache.thrift.TBase<authenticate_driver_args, authenticate_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticate_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_driver_args");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_driver_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_driver_args.class, metaDataMap);
    }

    public authenticate_driver_args() {
    }

    public authenticate_driver_args(
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_driver_args(authenticate_driver_args other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public authenticate_driver_args deepCopy() {
      return new authenticate_driver_args(this);
    }

    @Override
    public void clear() {
      this.security = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public authenticate_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_driver_args)
        return this.equals((authenticate_driver_args)that);
      return false;
    }

    public boolean equals(authenticate_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_driver_args(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticate_driver_argsStandardSchemeFactory implements SchemeFactory {
      public authenticate_driver_argsStandardScheme getScheme() {
        return new authenticate_driver_argsStandardScheme();
      }
    }

    private static class authenticate_driver_argsStandardScheme extends StandardScheme<authenticate_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_driver_argsTupleSchemeFactory implements SchemeFactory {
      public authenticate_driver_argsTupleScheme getScheme() {
        return new authenticate_driver_argsTupleScheme();
      }
    }

    private static class authenticate_driver_argsTupleScheme extends TupleScheme<authenticate_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class authenticate_driver_result implements org.apache.thrift.TBase<authenticate_driver_result, authenticate_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticate_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_driver_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_driver_result.class, metaDataMap);
    }

    public authenticate_driver_result() {
    }

    public authenticate_driver_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_driver_result(authenticate_driver_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public authenticate_driver_result deepCopy() {
      return new authenticate_driver_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public authenticate_driver_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_driver_result)
        return this.equals((authenticate_driver_result)that);
      return false;
    }

    public boolean equals(authenticate_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_driver_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticate_driver_resultStandardSchemeFactory implements SchemeFactory {
      public authenticate_driver_resultStandardScheme getScheme() {
        return new authenticate_driver_resultStandardScheme();
      }
    }

    private static class authenticate_driver_resultStandardScheme extends StandardScheme<authenticate_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_driver_resultTupleSchemeFactory implements SchemeFactory {
      public authenticate_driver_resultTupleScheme getScheme() {
        return new authenticate_driver_resultTupleScheme();
      }
    }

    private static class authenticate_driver_resultTupleScheme extends TupleScheme<authenticate_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class find_driver_args implements org.apache.thrift.TBase<find_driver_args, find_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<find_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new find_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new find_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzFindRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzFindRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_driver_args.class, metaDataMap);
    }

    public find_driver_args() {
    }

    public find_driver_args(
      String collection,
      EzFindRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_driver_args(find_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzFindRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public find_driver_args deepCopy() {
      return new find_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public find_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzFindRequest getRequest() {
      return this.request;
    }

    public find_driver_args setRequest(EzFindRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public find_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzFindRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof find_driver_args)
        return this.equals((find_driver_args)that);
      return false;
    }

    public boolean equals(find_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(find_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("find_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_driver_argsStandardSchemeFactory implements SchemeFactory {
      public find_driver_argsStandardScheme getScheme() {
        return new find_driver_argsStandardScheme();
      }
    }

    private static class find_driver_argsStandardScheme extends StandardScheme<find_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzFindRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_driver_argsTupleSchemeFactory implements SchemeFactory {
      public find_driver_argsTupleScheme getScheme() {
        return new find_driver_argsTupleScheme();
      }
    }

    private static class find_driver_argsTupleScheme extends TupleScheme<find_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzFindRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class find_driver_result implements org.apache.thrift.TBase<find_driver_result, find_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<find_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new find_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new find_driver_resultTupleSchemeFactory());
    }

    public ResultsWrapper success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultsWrapper.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_driver_result.class, metaDataMap);
    }

    public find_driver_result() {
    }

    public find_driver_result(
      ResultsWrapper success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_driver_result(find_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultsWrapper(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public find_driver_result deepCopy() {
      return new find_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public ResultsWrapper getSuccess() {
      return this.success;
    }

    public find_driver_result setSuccess(ResultsWrapper success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public find_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultsWrapper)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof find_driver_result)
        return this.equals((find_driver_result)that);
      return false;
    }

    public boolean equals(find_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(find_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("find_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_driver_resultStandardSchemeFactory implements SchemeFactory {
      public find_driver_resultStandardScheme getScheme() {
        return new find_driver_resultStandardScheme();
      }
    }

    private static class find_driver_resultStandardScheme extends StandardScheme<find_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultsWrapper();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_driver_resultTupleSchemeFactory implements SchemeFactory {
      public find_driver_resultTupleScheme getScheme() {
        return new find_driver_resultTupleScheme();
      }
    }

    private static class find_driver_resultTupleScheme extends TupleScheme<find_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResultsWrapper();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class aggregate_driver_args implements org.apache.thrift.TBase<aggregate_driver_args, aggregate_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<aggregate_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregate_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new aggregate_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new aggregate_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzAggregationRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzAggregationRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregate_driver_args.class, metaDataMap);
    }

    public aggregate_driver_args() {
    }

    public aggregate_driver_args(
      String collection,
      EzAggregationRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregate_driver_args(aggregate_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzAggregationRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public aggregate_driver_args deepCopy() {
      return new aggregate_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public aggregate_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzAggregationRequest getRequest() {
      return this.request;
    }

    public aggregate_driver_args setRequest(EzAggregationRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public aggregate_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzAggregationRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregate_driver_args)
        return this.equals((aggregate_driver_args)that);
      return false;
    }

    public boolean equals(aggregate_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(aggregate_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("aggregate_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregate_driver_argsStandardSchemeFactory implements SchemeFactory {
      public aggregate_driver_argsStandardScheme getScheme() {
        return new aggregate_driver_argsStandardScheme();
      }
    }

    private static class aggregate_driver_argsStandardScheme extends StandardScheme<aggregate_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregate_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzAggregationRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregate_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregate_driver_argsTupleSchemeFactory implements SchemeFactory {
      public aggregate_driver_argsTupleScheme getScheme() {
        return new aggregate_driver_argsTupleScheme();
      }
    }

    private static class aggregate_driver_argsTupleScheme extends TupleScheme<aggregate_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregate_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregate_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzAggregationRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class aggregate_driver_result implements org.apache.thrift.TBase<aggregate_driver_result, aggregate_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<aggregate_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregate_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new aggregate_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new aggregate_driver_resultTupleSchemeFactory());
    }

    public ResultsWrapper success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultsWrapper.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregate_driver_result.class, metaDataMap);
    }

    public aggregate_driver_result() {
    }

    public aggregate_driver_result(
      ResultsWrapper success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregate_driver_result(aggregate_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultsWrapper(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public aggregate_driver_result deepCopy() {
      return new aggregate_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public ResultsWrapper getSuccess() {
      return this.success;
    }

    public aggregate_driver_result setSuccess(ResultsWrapper success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public aggregate_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultsWrapper)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregate_driver_result)
        return this.equals((aggregate_driver_result)that);
      return false;
    }

    public boolean equals(aggregate_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(aggregate_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("aggregate_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregate_driver_resultStandardSchemeFactory implements SchemeFactory {
      public aggregate_driver_resultStandardScheme getScheme() {
        return new aggregate_driver_resultStandardScheme();
      }
    }

    private static class aggregate_driver_resultStandardScheme extends StandardScheme<aggregate_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregate_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultsWrapper();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregate_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregate_driver_resultTupleSchemeFactory implements SchemeFactory {
      public aggregate_driver_resultTupleScheme getScheme() {
        return new aggregate_driver_resultTupleScheme();
      }
    }

    private static class aggregate_driver_resultTupleScheme extends TupleScheme<aggregate_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregate_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregate_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResultsWrapper();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class insert_driver_args implements org.apache.thrift.TBase<insert_driver_args, insert_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<insert_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzInsertRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzInsertRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_driver_args.class, metaDataMap);
    }

    public insert_driver_args() {
    }

    public insert_driver_args(
      String collection,
      EzInsertRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_driver_args(insert_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzInsertRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public insert_driver_args deepCopy() {
      return new insert_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public insert_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzInsertRequest getRequest() {
      return this.request;
    }

    public insert_driver_args setRequest(EzInsertRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public insert_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzInsertRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_driver_args)
        return this.equals((insert_driver_args)that);
      return false;
    }

    public boolean equals(insert_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(insert_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_driver_argsStandardSchemeFactory implements SchemeFactory {
      public insert_driver_argsStandardScheme getScheme() {
        return new insert_driver_argsStandardScheme();
      }
    }

    private static class insert_driver_argsStandardScheme extends StandardScheme<insert_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzInsertRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_driver_argsTupleSchemeFactory implements SchemeFactory {
      public insert_driver_argsTupleScheme getScheme() {
        return new insert_driver_argsTupleScheme();
      }
    }

    private static class insert_driver_argsTupleScheme extends TupleScheme<insert_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzInsertRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class insert_driver_result implements org.apache.thrift.TBase<insert_driver_result, insert_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<insert_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_driver_resultTupleSchemeFactory());
    }

    public EzWriteResult success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzWriteResult.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_driver_result.class, metaDataMap);
    }

    public insert_driver_result() {
    }

    public insert_driver_result(
      EzWriteResult success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_driver_result(insert_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzWriteResult(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public insert_driver_result deepCopy() {
      return new insert_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzWriteResult getSuccess() {
      return this.success;
    }

    public insert_driver_result setSuccess(EzWriteResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public insert_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzWriteResult)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_driver_result)
        return this.equals((insert_driver_result)that);
      return false;
    }

    public boolean equals(insert_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(insert_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_driver_resultStandardSchemeFactory implements SchemeFactory {
      public insert_driver_resultStandardScheme getScheme() {
        return new insert_driver_resultStandardScheme();
      }
    }

    private static class insert_driver_resultStandardScheme extends StandardScheme<insert_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzWriteResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_driver_resultTupleSchemeFactory implements SchemeFactory {
      public insert_driver_resultTupleScheme getScheme() {
        return new insert_driver_resultTupleScheme();
      }
    }

    private static class insert_driver_resultTupleScheme extends TupleScheme<insert_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzWriteResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class update_driver_args implements org.apache.thrift.TBase<update_driver_args, update_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzUpdateRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzUpdateRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_driver_args.class, metaDataMap);
    }

    public update_driver_args() {
    }

    public update_driver_args(
      String collection,
      EzUpdateRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_driver_args(update_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzUpdateRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public update_driver_args deepCopy() {
      return new update_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public update_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzUpdateRequest getRequest() {
      return this.request;
    }

    public update_driver_args setRequest(EzUpdateRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public update_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzUpdateRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_driver_args)
        return this.equals((update_driver_args)that);
      return false;
    }

    public boolean equals(update_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(update_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_driver_argsStandardSchemeFactory implements SchemeFactory {
      public update_driver_argsStandardScheme getScheme() {
        return new update_driver_argsStandardScheme();
      }
    }

    private static class update_driver_argsStandardScheme extends StandardScheme<update_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzUpdateRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_driver_argsTupleSchemeFactory implements SchemeFactory {
      public update_driver_argsTupleScheme getScheme() {
        return new update_driver_argsTupleScheme();
      }
    }

    private static class update_driver_argsTupleScheme extends TupleScheme<update_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzUpdateRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class update_driver_result implements org.apache.thrift.TBase<update_driver_result, update_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_driver_resultTupleSchemeFactory());
    }

    public EzWriteResult success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzWriteResult.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_driver_result.class, metaDataMap);
    }

    public update_driver_result() {
    }

    public update_driver_result(
      EzWriteResult success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_driver_result(update_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzWriteResult(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public update_driver_result deepCopy() {
      return new update_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzWriteResult getSuccess() {
      return this.success;
    }

    public update_driver_result setSuccess(EzWriteResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public update_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzWriteResult)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_driver_result)
        return this.equals((update_driver_result)that);
      return false;
    }

    public boolean equals(update_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(update_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_driver_resultStandardSchemeFactory implements SchemeFactory {
      public update_driver_resultStandardScheme getScheme() {
        return new update_driver_resultStandardScheme();
      }
    }

    private static class update_driver_resultStandardScheme extends StandardScheme<update_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzWriteResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_driver_resultTupleSchemeFactory implements SchemeFactory {
      public update_driver_resultTupleScheme getScheme() {
        return new update_driver_resultTupleScheme();
      }
    }

    private static class update_driver_resultTupleScheme extends TupleScheme<update_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzWriteResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class drop_driver_args implements org.apache.thrift.TBase<drop_driver_args, drop_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<drop_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drop_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drop_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_driver_args.class, metaDataMap);
    }

    public drop_driver_args() {
    }

    public drop_driver_args(
      String collection,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_driver_args(drop_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public drop_driver_args deepCopy() {
      return new drop_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public drop_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public drop_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_driver_args)
        return this.equals((drop_driver_args)that);
      return false;
    }

    public boolean equals(drop_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(drop_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_driver_argsStandardSchemeFactory implements SchemeFactory {
      public drop_driver_argsStandardScheme getScheme() {
        return new drop_driver_argsStandardScheme();
      }
    }

    private static class drop_driver_argsStandardScheme extends StandardScheme<drop_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class drop_driver_argsTupleSchemeFactory implements SchemeFactory {
      public drop_driver_argsTupleScheme getScheme() {
        return new drop_driver_argsTupleScheme();
      }
    }

    private static class drop_driver_argsTupleScheme extends TupleScheme<drop_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class drop_driver_result implements org.apache.thrift.TBase<drop_driver_result, drop_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<drop_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drop_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drop_driver_resultTupleSchemeFactory());
    }

    public ResultsWrapper success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultsWrapper.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_driver_result.class, metaDataMap);
    }

    public drop_driver_result() {
    }

    public drop_driver_result(
      ResultsWrapper success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_driver_result(drop_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultsWrapper(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public drop_driver_result deepCopy() {
      return new drop_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public ResultsWrapper getSuccess() {
      return this.success;
    }

    public drop_driver_result setSuccess(ResultsWrapper success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public drop_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultsWrapper)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_driver_result)
        return this.equals((drop_driver_result)that);
      return false;
    }

    public boolean equals(drop_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(drop_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_driver_resultStandardSchemeFactory implements SchemeFactory {
      public drop_driver_resultStandardScheme getScheme() {
        return new drop_driver_resultStandardScheme();
      }
    }

    private static class drop_driver_resultStandardScheme extends StandardScheme<drop_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultsWrapper();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class drop_driver_resultTupleSchemeFactory implements SchemeFactory {
      public drop_driver_resultTupleScheme getScheme() {
        return new drop_driver_resultTupleScheme();
      }
    }

    private static class drop_driver_resultTupleScheme extends TupleScheme<drop_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResultsWrapper();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class createIndex_driver_args implements org.apache.thrift.TBase<createIndex_driver_args, createIndex_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<createIndex_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndex_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndex_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndex_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzCreateIndexRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzCreateIndexRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndex_driver_args.class, metaDataMap);
    }

    public createIndex_driver_args() {
    }

    public createIndex_driver_args(
      String collection,
      EzCreateIndexRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndex_driver_args(createIndex_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzCreateIndexRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public createIndex_driver_args deepCopy() {
      return new createIndex_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public createIndex_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzCreateIndexRequest getRequest() {
      return this.request;
    }

    public createIndex_driver_args setRequest(EzCreateIndexRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public createIndex_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzCreateIndexRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndex_driver_args)
        return this.equals((createIndex_driver_args)that);
      return false;
    }

    public boolean equals(createIndex_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createIndex_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndex_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndex_driver_argsStandardSchemeFactory implements SchemeFactory {
      public createIndex_driver_argsStandardScheme getScheme() {
        return new createIndex_driver_argsStandardScheme();
      }
    }

    private static class createIndex_driver_argsStandardScheme extends StandardScheme<createIndex_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndex_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzCreateIndexRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndex_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndex_driver_argsTupleSchemeFactory implements SchemeFactory {
      public createIndex_driver_argsTupleScheme getScheme() {
        return new createIndex_driver_argsTupleScheme();
      }
    }

    private static class createIndex_driver_argsTupleScheme extends TupleScheme<createIndex_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndex_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndex_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzCreateIndexRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class createIndex_driver_result implements org.apache.thrift.TBase<createIndex_driver_result, createIndex_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<createIndex_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndex_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndex_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndex_driver_resultTupleSchemeFactory());
    }

    public EzWriteResult success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzWriteResult.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndex_driver_result.class, metaDataMap);
    }

    public createIndex_driver_result() {
    }

    public createIndex_driver_result(
      EzWriteResult success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndex_driver_result(createIndex_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzWriteResult(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public createIndex_driver_result deepCopy() {
      return new createIndex_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzWriteResult getSuccess() {
      return this.success;
    }

    public createIndex_driver_result setSuccess(EzWriteResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public createIndex_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzWriteResult)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndex_driver_result)
        return this.equals((createIndex_driver_result)that);
      return false;
    }

    public boolean equals(createIndex_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createIndex_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndex_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndex_driver_resultStandardSchemeFactory implements SchemeFactory {
      public createIndex_driver_resultStandardScheme getScheme() {
        return new createIndex_driver_resultStandardScheme();
      }
    }

    private static class createIndex_driver_resultStandardScheme extends StandardScheme<createIndex_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndex_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzWriteResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndex_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndex_driver_resultTupleSchemeFactory implements SchemeFactory {
      public createIndex_driver_resultTupleScheme getScheme() {
        return new createIndex_driver_resultTupleScheme();
      }
    }

    private static class createIndex_driver_resultTupleScheme extends TupleScheme<createIndex_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndex_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndex_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzWriteResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class getMore_driver_args implements org.apache.thrift.TBase<getMore_driver_args, getMore_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMore_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMore_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMore_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMore_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzGetMoreRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzGetMoreRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMore_driver_args.class, metaDataMap);
    }

    public getMore_driver_args() {
    }

    public getMore_driver_args(
      String collection,
      EzGetMoreRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMore_driver_args(getMore_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzGetMoreRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getMore_driver_args deepCopy() {
      return new getMore_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public getMore_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzGetMoreRequest getRequest() {
      return this.request;
    }

    public getMore_driver_args setRequest(EzGetMoreRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getMore_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzGetMoreRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMore_driver_args)
        return this.equals((getMore_driver_args)that);
      return false;
    }

    public boolean equals(getMore_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getMore_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMore_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMore_driver_argsStandardSchemeFactory implements SchemeFactory {
      public getMore_driver_argsStandardScheme getScheme() {
        return new getMore_driver_argsStandardScheme();
      }
    }

    private static class getMore_driver_argsStandardScheme extends StandardScheme<getMore_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMore_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzGetMoreRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMore_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMore_driver_argsTupleSchemeFactory implements SchemeFactory {
      public getMore_driver_argsTupleScheme getScheme() {
        return new getMore_driver_argsTupleScheme();
      }
    }

    private static class getMore_driver_argsTupleScheme extends TupleScheme<getMore_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMore_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMore_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzGetMoreRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getMore_driver_result implements org.apache.thrift.TBase<getMore_driver_result, getMore_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMore_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMore_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMore_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMore_driver_resultTupleSchemeFactory());
    }

    public EzGetMoreResponse success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzGetMoreResponse.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMore_driver_result.class, metaDataMap);
    }

    public getMore_driver_result() {
    }

    public getMore_driver_result(
      EzGetMoreResponse success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMore_driver_result(getMore_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzGetMoreResponse(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public getMore_driver_result deepCopy() {
      return new getMore_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzGetMoreResponse getSuccess() {
      return this.success;
    }

    public getMore_driver_result setSuccess(EzGetMoreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public getMore_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzGetMoreResponse)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMore_driver_result)
        return this.equals((getMore_driver_result)that);
      return false;
    }

    public boolean equals(getMore_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getMore_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMore_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMore_driver_resultStandardSchemeFactory implements SchemeFactory {
      public getMore_driver_resultStandardScheme getScheme() {
        return new getMore_driver_resultStandardScheme();
      }
    }

    private static class getMore_driver_resultStandardScheme extends StandardScheme<getMore_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMore_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzGetMoreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMore_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMore_driver_resultTupleSchemeFactory implements SchemeFactory {
      public getMore_driver_resultTupleScheme getScheme() {
        return new getMore_driver_resultTupleScheme();
      }
    }

    private static class getMore_driver_resultTupleScheme extends TupleScheme<getMore_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMore_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMore_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzGetMoreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class parallelScan_driver_args implements org.apache.thrift.TBase<parallelScan_driver_args, parallelScan_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<parallelScan_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelScan_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parallelScan_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parallelScan_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzParallelScanOptions options; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      OPTIONS((short)2, "options"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // OPTIONS
            return OPTIONS;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzParallelScanOptions.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelScan_driver_args.class, metaDataMap);
    }

    public parallelScan_driver_args() {
    }

    public parallelScan_driver_args(
      String collection,
      EzParallelScanOptions options,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.options = options;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parallelScan_driver_args(parallelScan_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetOptions()) {
        this.options = new EzParallelScanOptions(other.options);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public parallelScan_driver_args deepCopy() {
      return new parallelScan_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.options = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public parallelScan_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzParallelScanOptions getOptions() {
      return this.options;
    }

    public parallelScan_driver_args setOptions(EzParallelScanOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public parallelScan_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((EzParallelScanOptions)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case OPTIONS:
        return getOptions();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case OPTIONS:
        return isSetOptions();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parallelScan_driver_args)
        return this.equals((parallelScan_driver_args)that);
      return false;
    }

    public boolean equals(parallelScan_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_options = true && (isSetOptions());
      builder.append(present_options);
      if (present_options)
        builder.append(options);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(parallelScan_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parallelScan_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parallelScan_driver_argsStandardSchemeFactory implements SchemeFactory {
      public parallelScan_driver_argsStandardScheme getScheme() {
        return new parallelScan_driver_argsStandardScheme();
      }
    }

    private static class parallelScan_driver_argsStandardScheme extends StandardScheme<parallelScan_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parallelScan_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new EzParallelScanOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parallelScan_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parallelScan_driver_argsTupleSchemeFactory implements SchemeFactory {
      public parallelScan_driver_argsTupleScheme getScheme() {
        return new parallelScan_driver_argsTupleScheme();
      }
    }

    private static class parallelScan_driver_argsTupleScheme extends TupleScheme<parallelScan_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parallelScan_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetOptions()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parallelScan_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.options = new EzParallelScanOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class parallelScan_driver_result implements org.apache.thrift.TBase<parallelScan_driver_result, parallelScan_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<parallelScan_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelScan_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parallelScan_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parallelScan_driver_resultTupleSchemeFactory());
    }

    public EzParallelScanResponse success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzParallelScanResponse.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelScan_driver_result.class, metaDataMap);
    }

    public parallelScan_driver_result() {
    }

    public parallelScan_driver_result(
      EzParallelScanResponse success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parallelScan_driver_result(parallelScan_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzParallelScanResponse(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public parallelScan_driver_result deepCopy() {
      return new parallelScan_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzParallelScanResponse getSuccess() {
      return this.success;
    }

    public parallelScan_driver_result setSuccess(EzParallelScanResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public parallelScan_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzParallelScanResponse)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parallelScan_driver_result)
        return this.equals((parallelScan_driver_result)that);
      return false;
    }

    public boolean equals(parallelScan_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(parallelScan_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parallelScan_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parallelScan_driver_resultStandardSchemeFactory implements SchemeFactory {
      public parallelScan_driver_resultStandardScheme getScheme() {
        return new parallelScan_driver_resultStandardScheme();
      }
    }

    private static class parallelScan_driver_resultStandardScheme extends StandardScheme<parallelScan_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parallelScan_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzParallelScanResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parallelScan_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parallelScan_driver_resultTupleSchemeFactory implements SchemeFactory {
      public parallelScan_driver_resultTupleScheme getScheme() {
        return new parallelScan_driver_resultTupleScheme();
      }
    }

    private static class parallelScan_driver_resultTupleScheme extends TupleScheme<parallelScan_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parallelScan_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parallelScan_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzParallelScanResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class remove_driver_args implements org.apache.thrift.TBase<remove_driver_args, remove_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<remove_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_driver_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_driver_argsTupleSchemeFactory());
    }

    public String collection; // required
    public EzRemoveRequest request; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION((short)1, "collection"),
      REQUEST((short)2, "request"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION
            return COLLECTION;
          case 2: // REQUEST
            return REQUEST;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzRemoveRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_driver_args.class, metaDataMap);
    }

    public remove_driver_args() {
    }

    public remove_driver_args(
      String collection,
      EzRemoveRequest request,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collection = collection;
      this.request = request;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_driver_args(remove_driver_args other) {
      if (other.isSetCollection()) {
        this.collection = other.collection;
      }
      if (other.isSetRequest()) {
        this.request = new EzRemoveRequest(other.request);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public remove_driver_args deepCopy() {
      return new remove_driver_args(this);
    }

    @Override
    public void clear() {
      this.collection = null;
      this.request = null;
      this.security = null;
    }

    public String getCollection() {
      return this.collection;
    }

    public remove_driver_args setCollection(String collection) {
      this.collection = collection;
      return this;
    }

    public void unsetCollection() {
      this.collection = null;
    }

    /** Returns true if field collection is set (has been assigned a value) and false otherwise */
    public boolean isSetCollection() {
      return this.collection != null;
    }

    public void setCollectionIsSet(boolean value) {
      if (!value) {
        this.collection = null;
      }
    }

    public EzRemoveRequest getRequest() {
      return this.request;
    }

    public remove_driver_args setRequest(EzRemoveRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public remove_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          setCollection((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((EzRemoveRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION:
        return getCollection();

      case REQUEST:
        return getRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION:
        return isSetCollection();
      case REQUEST:
        return isSetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_driver_args)
        return this.equals((remove_driver_args)that);
      return false;
    }

    public boolean equals(remove_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_collection = true && this.isSetCollection();
      boolean that_present_collection = true && that.isSetCollection();
      if (this_present_collection || that_present_collection) {
        if (!(this_present_collection && that_present_collection))
          return false;
        if (!this.collection.equals(that.collection))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collection = true && (isSetCollection());
      builder.append(present_collection);
      if (present_collection)
        builder.append(collection);

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(remove_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_driver_args(");
      boolean first = true;

      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_driver_argsStandardSchemeFactory implements SchemeFactory {
      public remove_driver_argsStandardScheme getScheme() {
        return new remove_driver_argsStandardScheme();
      }
    }

    private static class remove_driver_argsStandardScheme extends StandardScheme<remove_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collection = iprot.readString();
                struct.setCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new EzRemoveRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collection != null) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_driver_argsTupleSchemeFactory implements SchemeFactory {
      public remove_driver_argsTupleScheme getScheme() {
        return new remove_driver_argsTupleScheme();
      }
    }

    private static class remove_driver_argsTupleScheme extends TupleScheme<remove_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollection()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollection()) {
          oprot.writeString(struct.collection);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collection = iprot.readString();
          struct.setCollectionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new EzRemoveRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class remove_driver_result implements org.apache.thrift.TBase<remove_driver_result, remove_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_driver_resultTupleSchemeFactory());
    }

    public EzWriteResult success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EzWriteResult.class)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_driver_result.class, metaDataMap);
    }

    public remove_driver_result() {
    }

    public remove_driver_result(
      EzWriteResult success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_driver_result(remove_driver_result other) {
      if (other.isSetSuccess()) {
        this.success = new EzWriteResult(other.success);
      }
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public remove_driver_result deepCopy() {
      return new remove_driver_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EzMongoDriverException = null;
    }

    public EzWriteResult getSuccess() {
      return this.success;
    }

    public remove_driver_result setSuccess(EzWriteResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public remove_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EzWriteResult)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_driver_result)
        return this.equals((remove_driver_result)that);
      return false;
    }

    public boolean equals(remove_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(remove_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_driver_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_driver_resultStandardSchemeFactory implements SchemeFactory {
      public remove_driver_resultStandardScheme getScheme() {
        return new remove_driver_resultStandardScheme();
      }
    }

    private static class remove_driver_resultStandardScheme extends StandardScheme<remove_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EzWriteResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_driver_resultTupleSchemeFactory implements SchemeFactory {
      public remove_driver_resultTupleScheme getScheme() {
        return new remove_driver_resultTupleScheme();
      }
    }

    private static class remove_driver_resultTupleScheme extends TupleScheme<remove_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EzWriteResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

  public static class getMaxBsonObjectSize_driver_args implements org.apache.thrift.TBase<getMaxBsonObjectSize_driver_args, getMaxBsonObjectSize_driver_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxBsonObjectSize_driver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxBsonObjectSize_driver_args");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxBsonObjectSize_driver_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxBsonObjectSize_driver_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxBsonObjectSize_driver_args.class, metaDataMap);
    }

    public getMaxBsonObjectSize_driver_args() {
    }

    public getMaxBsonObjectSize_driver_args(
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxBsonObjectSize_driver_args(getMaxBsonObjectSize_driver_args other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getMaxBsonObjectSize_driver_args deepCopy() {
      return new getMaxBsonObjectSize_driver_args(this);
    }

    @Override
    public void clear() {
      this.security = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getMaxBsonObjectSize_driver_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxBsonObjectSize_driver_args)
        return this.equals((getMaxBsonObjectSize_driver_args)that);
      return false;
    }

    public boolean equals(getMaxBsonObjectSize_driver_args that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getMaxBsonObjectSize_driver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxBsonObjectSize_driver_args(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxBsonObjectSize_driver_argsStandardSchemeFactory implements SchemeFactory {
      public getMaxBsonObjectSize_driver_argsStandardScheme getScheme() {
        return new getMaxBsonObjectSize_driver_argsStandardScheme();
      }
    }

    private static class getMaxBsonObjectSize_driver_argsStandardScheme extends StandardScheme<getMaxBsonObjectSize_driver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxBsonObjectSize_driver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxBsonObjectSize_driver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxBsonObjectSize_driver_argsTupleSchemeFactory implements SchemeFactory {
      public getMaxBsonObjectSize_driver_argsTupleScheme getScheme() {
        return new getMaxBsonObjectSize_driver_argsTupleScheme();
      }
    }

    private static class getMaxBsonObjectSize_driver_argsTupleScheme extends TupleScheme<getMaxBsonObjectSize_driver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxBsonObjectSize_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxBsonObjectSize_driver_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getMaxBsonObjectSize_driver_result implements org.apache.thrift.TBase<getMaxBsonObjectSize_driver_result, getMaxBsonObjectSize_driver_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxBsonObjectSize_driver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxBsonObjectSize_driver_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EzMongoDriverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxBsonObjectSize_driver_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxBsonObjectSize_driver_resultTupleSchemeFactory());
    }

    public int success; // required
    public EzMongoDriverException EzMongoDriverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_DRIVER_EXCEPTION((short)1, "EzMongoDriverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_DRIVER_EXCEPTION
            return EZ_MONGO_DRIVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EZ_MONGO_DRIVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EzMongoDriverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxBsonObjectSize_driver_result.class, metaDataMap);
    }

    public getMaxBsonObjectSize_driver_result() {
    }

    public getMaxBsonObjectSize_driver_result(
      int success,
      EzMongoDriverException EzMongoDriverException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.EzMongoDriverException = EzMongoDriverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxBsonObjectSize_driver_result(getMaxBsonObjectSize_driver_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoDriverException()) {
        this.EzMongoDriverException = new EzMongoDriverException(other.EzMongoDriverException);
      }
    }

    public getMaxBsonObjectSize_driver_result deepCopy() {
      return new getMaxBsonObjectSize_driver_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.EzMongoDriverException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getMaxBsonObjectSize_driver_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoDriverException getEzMongoDriverException() {
      return this.EzMongoDriverException;
    }

    public getMaxBsonObjectSize_driver_result setEzMongoDriverException(EzMongoDriverException EzMongoDriverException) {
      this.EzMongoDriverException = EzMongoDriverException;
      return this;
    }

    public void unsetEzMongoDriverException() {
      this.EzMongoDriverException = null;
    }

    /** Returns true if field EzMongoDriverException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoDriverException() {
      return this.EzMongoDriverException != null;
    }

    public void setEzMongoDriverExceptionIsSet(boolean value) {
      if (!value) {
        this.EzMongoDriverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EZ_MONGO_DRIVER_EXCEPTION:
        if (value == null) {
          unsetEzMongoDriverException();
        } else {
          setEzMongoDriverException((EzMongoDriverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EZ_MONGO_DRIVER_EXCEPTION:
        return getEzMongoDriverException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_DRIVER_EXCEPTION:
        return isSetEzMongoDriverException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxBsonObjectSize_driver_result)
        return this.equals((getMaxBsonObjectSize_driver_result)that);
      return false;
    }

    public boolean equals(getMaxBsonObjectSize_driver_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_EzMongoDriverException = true && this.isSetEzMongoDriverException();
      boolean that_present_EzMongoDriverException = true && that.isSetEzMongoDriverException();
      if (this_present_EzMongoDriverException || that_present_EzMongoDriverException) {
        if (!(this_present_EzMongoDriverException && that_present_EzMongoDriverException))
          return false;
        if (!this.EzMongoDriverException.equals(that.EzMongoDriverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_EzMongoDriverException = true && (isSetEzMongoDriverException());
      builder.append(present_EzMongoDriverException);
      if (present_EzMongoDriverException)
        builder.append(EzMongoDriverException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getMaxBsonObjectSize_driver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoDriverException()).compareTo(other.isSetEzMongoDriverException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoDriverException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EzMongoDriverException, other.EzMongoDriverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxBsonObjectSize_driver_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("EzMongoDriverException:");
      if (this.EzMongoDriverException == null) {
        sb.append("null");
      } else {
        sb.append(this.EzMongoDriverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxBsonObjectSize_driver_resultStandardSchemeFactory implements SchemeFactory {
      public getMaxBsonObjectSize_driver_resultStandardScheme getScheme() {
        return new getMaxBsonObjectSize_driver_resultStandardScheme();
      }
    }

    private static class getMaxBsonObjectSize_driver_resultStandardScheme extends StandardScheme<getMaxBsonObjectSize_driver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxBsonObjectSize_driver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_DRIVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EzMongoDriverException = new EzMongoDriverException();
                struct.EzMongoDriverException.read(iprot);
                struct.setEzMongoDriverExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxBsonObjectSize_driver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.EzMongoDriverException != null) {
          oprot.writeFieldBegin(EZ_MONGO_DRIVER_EXCEPTION_FIELD_DESC);
          struct.EzMongoDriverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxBsonObjectSize_driver_resultTupleSchemeFactory implements SchemeFactory {
      public getMaxBsonObjectSize_driver_resultTupleScheme getScheme() {
        return new getMaxBsonObjectSize_driver_resultTupleScheme();
      }
    }

    private static class getMaxBsonObjectSize_driver_resultTupleScheme extends TupleScheme<getMaxBsonObjectSize_driver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxBsonObjectSize_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoDriverException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEzMongoDriverException()) {
          struct.EzMongoDriverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxBsonObjectSize_driver_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EzMongoDriverException = new EzMongoDriverException();
          struct.EzMongoDriverException.read(iprot);
          struct.setEzMongoDriverExceptionIsSet(true);
        }
      }
    }

  }

}
