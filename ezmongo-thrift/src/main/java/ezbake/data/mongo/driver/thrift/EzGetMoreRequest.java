/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.mongo.driver.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzGetMoreRequest implements org.apache.thrift.TBase<EzGetMoreRequest, EzGetMoreRequest._Fields>, java.io.Serializable, Cloneable, Comparable<EzGetMoreRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EzGetMoreRequest");

  private static final org.apache.thrift.protocol.TField OUTMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("outmessage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DECODER_FIELD_DESC = new org.apache.thrift.protocol.TField("decoder", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_RESULT_ITERATOR_HASHCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryResultIteratorHashcode", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EzGetMoreRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EzGetMoreRequestTupleSchemeFactory());
  }

  public ByteBuffer outmessage; // required
  public ByteBuffer decoder; // required
  public String queryResultIteratorHashcode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTMESSAGE((short)1, "outmessage"),
    DECODER((short)2, "decoder"),
    QUERY_RESULT_ITERATOR_HASHCODE((short)3, "queryResultIteratorHashcode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTMESSAGE
          return OUTMESSAGE;
        case 2: // DECODER
          return DECODER;
        case 3: // QUERY_RESULT_ITERATOR_HASHCODE
          return QUERY_RESULT_ITERATOR_HASHCODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("outmessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DECODER, new org.apache.thrift.meta_data.FieldMetaData("decoder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.QUERY_RESULT_ITERATOR_HASHCODE, new org.apache.thrift.meta_data.FieldMetaData("queryResultIteratorHashcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EzGetMoreRequest.class, metaDataMap);
  }

  public EzGetMoreRequest() {
  }

  public EzGetMoreRequest(
    ByteBuffer outmessage,
    ByteBuffer decoder,
    String queryResultIteratorHashcode)
  {
    this();
    this.outmessage = outmessage;
    this.decoder = decoder;
    this.queryResultIteratorHashcode = queryResultIteratorHashcode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EzGetMoreRequest(EzGetMoreRequest other) {
    if (other.isSetOutmessage()) {
      this.outmessage = org.apache.thrift.TBaseHelper.copyBinary(other.outmessage);
;
    }
    if (other.isSetDecoder()) {
      this.decoder = org.apache.thrift.TBaseHelper.copyBinary(other.decoder);
;
    }
    if (other.isSetQueryResultIteratorHashcode()) {
      this.queryResultIteratorHashcode = other.queryResultIteratorHashcode;
    }
  }

  public EzGetMoreRequest deepCopy() {
    return new EzGetMoreRequest(this);
  }

  @Override
  public void clear() {
    this.outmessage = null;
    this.decoder = null;
    this.queryResultIteratorHashcode = null;
  }

  public byte[] getOutmessage() {
    setOutmessage(org.apache.thrift.TBaseHelper.rightSize(outmessage));
    return outmessage == null ? null : outmessage.array();
  }

  public ByteBuffer bufferForOutmessage() {
    return outmessage;
  }

  public EzGetMoreRequest setOutmessage(byte[] outmessage) {
    setOutmessage(outmessage == null ? (ByteBuffer)null : ByteBuffer.wrap(outmessage));
    return this;
  }

  public EzGetMoreRequest setOutmessage(ByteBuffer outmessage) {
    this.outmessage = outmessage;
    return this;
  }

  public void unsetOutmessage() {
    this.outmessage = null;
  }

  /** Returns true if field outmessage is set (has been assigned a value) and false otherwise */
  public boolean isSetOutmessage() {
    return this.outmessage != null;
  }

  public void setOutmessageIsSet(boolean value) {
    if (!value) {
      this.outmessage = null;
    }
  }

  public byte[] getDecoder() {
    setDecoder(org.apache.thrift.TBaseHelper.rightSize(decoder));
    return decoder == null ? null : decoder.array();
  }

  public ByteBuffer bufferForDecoder() {
    return decoder;
  }

  public EzGetMoreRequest setDecoder(byte[] decoder) {
    setDecoder(decoder == null ? (ByteBuffer)null : ByteBuffer.wrap(decoder));
    return this;
  }

  public EzGetMoreRequest setDecoder(ByteBuffer decoder) {
    this.decoder = decoder;
    return this;
  }

  public void unsetDecoder() {
    this.decoder = null;
  }

  /** Returns true if field decoder is set (has been assigned a value) and false otherwise */
  public boolean isSetDecoder() {
    return this.decoder != null;
  }

  public void setDecoderIsSet(boolean value) {
    if (!value) {
      this.decoder = null;
    }
  }

  public String getQueryResultIteratorHashcode() {
    return this.queryResultIteratorHashcode;
  }

  public EzGetMoreRequest setQueryResultIteratorHashcode(String queryResultIteratorHashcode) {
    this.queryResultIteratorHashcode = queryResultIteratorHashcode;
    return this;
  }

  public void unsetQueryResultIteratorHashcode() {
    this.queryResultIteratorHashcode = null;
  }

  /** Returns true if field queryResultIteratorHashcode is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryResultIteratorHashcode() {
    return this.queryResultIteratorHashcode != null;
  }

  public void setQueryResultIteratorHashcodeIsSet(boolean value) {
    if (!value) {
      this.queryResultIteratorHashcode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUTMESSAGE:
      if (value == null) {
        unsetOutmessage();
      } else {
        setOutmessage((ByteBuffer)value);
      }
      break;

    case DECODER:
      if (value == null) {
        unsetDecoder();
      } else {
        setDecoder((ByteBuffer)value);
      }
      break;

    case QUERY_RESULT_ITERATOR_HASHCODE:
      if (value == null) {
        unsetQueryResultIteratorHashcode();
      } else {
        setQueryResultIteratorHashcode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTMESSAGE:
      return getOutmessage();

    case DECODER:
      return getDecoder();

    case QUERY_RESULT_ITERATOR_HASHCODE:
      return getQueryResultIteratorHashcode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUTMESSAGE:
      return isSetOutmessage();
    case DECODER:
      return isSetDecoder();
    case QUERY_RESULT_ITERATOR_HASHCODE:
      return isSetQueryResultIteratorHashcode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EzGetMoreRequest)
      return this.equals((EzGetMoreRequest)that);
    return false;
  }

  public boolean equals(EzGetMoreRequest that) {
    if (that == null)
      return false;

    boolean this_present_outmessage = true && this.isSetOutmessage();
    boolean that_present_outmessage = true && that.isSetOutmessage();
    if (this_present_outmessage || that_present_outmessage) {
      if (!(this_present_outmessage && that_present_outmessage))
        return false;
      if (!this.outmessage.equals(that.outmessage))
        return false;
    }

    boolean this_present_decoder = true && this.isSetDecoder();
    boolean that_present_decoder = true && that.isSetDecoder();
    if (this_present_decoder || that_present_decoder) {
      if (!(this_present_decoder && that_present_decoder))
        return false;
      if (!this.decoder.equals(that.decoder))
        return false;
    }

    boolean this_present_queryResultIteratorHashcode = true && this.isSetQueryResultIteratorHashcode();
    boolean that_present_queryResultIteratorHashcode = true && that.isSetQueryResultIteratorHashcode();
    if (this_present_queryResultIteratorHashcode || that_present_queryResultIteratorHashcode) {
      if (!(this_present_queryResultIteratorHashcode && that_present_queryResultIteratorHashcode))
        return false;
      if (!this.queryResultIteratorHashcode.equals(that.queryResultIteratorHashcode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_outmessage = true && (isSetOutmessage());
    builder.append(present_outmessage);
    if (present_outmessage)
      builder.append(outmessage);

    boolean present_decoder = true && (isSetDecoder());
    builder.append(present_decoder);
    if (present_decoder)
      builder.append(decoder);

    boolean present_queryResultIteratorHashcode = true && (isSetQueryResultIteratorHashcode());
    builder.append(present_queryResultIteratorHashcode);
    if (present_queryResultIteratorHashcode)
      builder.append(queryResultIteratorHashcode);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(EzGetMoreRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutmessage()).compareTo(other.isSetOutmessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutmessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outmessage, other.outmessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecoder()).compareTo(other.isSetDecoder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecoder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decoder, other.decoder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryResultIteratorHashcode()).compareTo(other.isSetQueryResultIteratorHashcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryResultIteratorHashcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryResultIteratorHashcode, other.queryResultIteratorHashcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EzGetMoreRequest(");
    boolean first = true;

    sb.append("outmessage:");
    if (this.outmessage == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.outmessage, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("decoder:");
    if (this.decoder == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.decoder, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryResultIteratorHashcode:");
    if (this.queryResultIteratorHashcode == null) {
      sb.append("null");
    } else {
      sb.append(this.queryResultIteratorHashcode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EzGetMoreRequestStandardSchemeFactory implements SchemeFactory {
    public EzGetMoreRequestStandardScheme getScheme() {
      return new EzGetMoreRequestStandardScheme();
    }
  }

  private static class EzGetMoreRequestStandardScheme extends StandardScheme<EzGetMoreRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EzGetMoreRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTMESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outmessage = iprot.readBinary();
              struct.setOutmessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DECODER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.decoder = iprot.readBinary();
              struct.setDecoderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_RESULT_ITERATOR_HASHCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryResultIteratorHashcode = iprot.readString();
              struct.setQueryResultIteratorHashcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EzGetMoreRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outmessage != null) {
        oprot.writeFieldBegin(OUTMESSAGE_FIELD_DESC);
        oprot.writeBinary(struct.outmessage);
        oprot.writeFieldEnd();
      }
      if (struct.decoder != null) {
        oprot.writeFieldBegin(DECODER_FIELD_DESC);
        oprot.writeBinary(struct.decoder);
        oprot.writeFieldEnd();
      }
      if (struct.queryResultIteratorHashcode != null) {
        oprot.writeFieldBegin(QUERY_RESULT_ITERATOR_HASHCODE_FIELD_DESC);
        oprot.writeString(struct.queryResultIteratorHashcode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EzGetMoreRequestTupleSchemeFactory implements SchemeFactory {
    public EzGetMoreRequestTupleScheme getScheme() {
      return new EzGetMoreRequestTupleScheme();
    }
  }

  private static class EzGetMoreRequestTupleScheme extends TupleScheme<EzGetMoreRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EzGetMoreRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOutmessage()) {
        optionals.set(0);
      }
      if (struct.isSetDecoder()) {
        optionals.set(1);
      }
      if (struct.isSetQueryResultIteratorHashcode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOutmessage()) {
        oprot.writeBinary(struct.outmessage);
      }
      if (struct.isSetDecoder()) {
        oprot.writeBinary(struct.decoder);
      }
      if (struct.isSetQueryResultIteratorHashcode()) {
        oprot.writeString(struct.queryResultIteratorHashcode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EzGetMoreRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.outmessage = iprot.readBinary();
        struct.setOutmessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.decoder = iprot.readBinary();
        struct.setDecoderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryResultIteratorHashcode = iprot.readString();
        struct.setQueryResultIteratorHashcodeIsSet(true);
      }
    }
  }

}

