/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.mongo.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzMongo {

  public interface Iface extends ezbake.data.base.thrift.BaseDataService.Iface {

    /**
     * Ensures index on the collection.
     * 
     * 
     * @param collectionName
     * @param jsonKeys
     * @param jsonOptions
     * @param security
     */
    public void ensureIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Creates index on the collection.
     * 
     * 
     * @param collectionName
     * @param jsonKeys
     * @param jsonOptions
     * @param security
     */
    public void createIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Returns serialized strings of MongoDB's DBObjects representing indexes on the collection.
     * 
     * 
     * @param collectionName
     * @param security
     */
    public List<String> getIndexInfo(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Checks if the collection exists in the database.
     * 
     * 
     * @param collectionName
     * @param security
     */
    public boolean collectionExists(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Creates the collection in the database.
     * 
     * 
     * @param collectionName
     * @param security
     */
    public void createCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Drops the collection from the database.
     * 
     * 
     * @param collectionName
     * @param security
     */
    public void dropCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Returns the count of all records from jsonQuery in the collection.
     * 
     * 
     * 
     * @param collectionName
     * @param security
     */
    public long getCount(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Returns the count of records from the jsonQuery in the collection.
     * Note that to pass in the "_id" (ObjectId), the jsonQuery should be in the form of:
     * { "_id" : { "$oid" : "...." } }
     * 
     * Also, the jsonQuery cannot have the "$match" and "$where" operators since the MongoDB aggregation
     * pipeline is used in the query.
     * 
     * 
     * @param collectionName
     * @param jsonQuery
     * @param security
     */
    public long getCountFromQuery(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Performs a Text Search using Text Indexes.
     * It expects the necessary text indexes have been created on the collection
     * prior to being called.
     * 
     * 
     * @param collectionName
     * @param searchText
     * @param security
     */
    public List<String> textSearch(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Returns the records in serialized form of MongoDB's DBObjects from the jsonQuery,
     * using the skip & limit values and projecting the fields in jsonProjection.
     * Note that to pass in the "_id" (ObjectId), the jsonQuery should be in the form of:
     * { "_id" : { "$oid" : "...." } }
     * 
     * If returnPlainObjectIdString is true, it returns the _id as plain string instead of the $oid format.
     * 
     * Also, the jsonQuery cannot have the "$match" and "$where" operators since the MongoDB aggregation
     * pipeline is used in the query.
     * 
     * 
     * @param collectionName
     * @param mongoFindParams
     * @param security
     */
    public List<String> find(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Returns the distinct values as returned by Mongo's db.collection.distinct(field, query) call.
     * Note that to pass in the "_id" (ObjectId), the jsonQuery should be in the form of:
     * { "_id" : { "$oid" : "...." } }
     * 
     * Also, the jsonQuery cannot have the "$match" and "$where" operators since the MongoDB aggregation
     * pipeline is used in the query.
     * 
     * 
     * @param collectionName
     * @param mongoDistinctParams
     * @param security
     */
    public List<String> distinct(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Inserts the jsonDocument in the collection, with the DocumentClassification.
     * Currently, the DocumentClassification has a single string representing CAPCO.
     * 
     * 
     * @param collectionName
     * @param mongoDocument
     * @param security
     */
    public String insert(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Updates the records in the jsonQuery with the jsonDocument in the collection.
     * If the updateWithOperators boolean parameter is true:
     *    Mongo update operators such as $set, $push, $pull can be used in the jsonDocument.
     * Else (updateWithOperators boolean parameter is false -- this is the default):
     *    Selective update is used (Mongo's "$set" operator is used in the update),
     *    meaning, only the fields passed in the jsonDocument will be updated,
     *    not overwriting the whole object.
     * 
     * Currently, this uses "upsert" as false and "multi" as true in the Mongo update operation.
     * 
     * If you don't wish to update the security fields (_ez* fields) of the document, the Visibility object
     * in the MongoEzbakeDocument can be be empty (no FormalVisibility/AdvancedMarkings set).
     * 
     * Note that to pass in the "_id" (ObjectId), the jsonQuery should be in the form of:
     * { "_id" : { "$oid" : "...." } }
     * 
     * Also, the jsonQuery cannot have the "$match" and "$where" operators since the MongoDB aggregation
     * pipeline is used in the query.
     * 
     * 
     * @param collectionName
     * @param mongoUpdateParams
     * @param security
     */
    public int update(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

    /**
     * Removes the records in the jsonQuery in the collection.
     * 
     * Note that to pass in the "_id" (ObjectId), the jsonQuery should be in the form of:
     * { "_id" : { "$oid" : "...." } }
     * 
     * Also, the jsonQuery cannot have the "$match" and "$where" operators since the MongoDB aggregation
     * pipeline is used in the query.
     * 
     * 
     * @param collectionName
     * @param jsonQuery
     * @param security
     */
    public int remove(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.data.base.thrift.BaseDataService .AsyncIface {

    public void ensureIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIndexInfo(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void collectionExists(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dropCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCount(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCountFromQuery(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void textSearch(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void find(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void distinct(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insert(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void remove(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.data.base.thrift.BaseDataService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ensureIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_ensureIndex(collectionName, jsonKeys, jsonOptions, security);
      recv_ensureIndex();
    }

    public void send_ensureIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      ensureIndex_args args = new ensureIndex_args();
      args.setCollectionName(collectionName);
      args.setJsonKeys(jsonKeys);
      args.setJsonOptions(jsonOptions);
      args.setSecurity(security);
      sendBase("ensureIndex", args);
    }

    public void recv_ensureIndex() throws EzMongoBaseException, org.apache.thrift.TException
    {
      ensureIndex_result result = new ensureIndex_result();
      receiveBase(result, "ensureIndex");
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      return;
    }

    public void createIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_createIndex(collectionName, jsonKeys, jsonOptions, security);
      recv_createIndex();
    }

    public void send_createIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      createIndex_args args = new createIndex_args();
      args.setCollectionName(collectionName);
      args.setJsonKeys(jsonKeys);
      args.setJsonOptions(jsonOptions);
      args.setSecurity(security);
      sendBase("createIndex", args);
    }

    public void recv_createIndex() throws EzMongoBaseException, org.apache.thrift.TException
    {
      createIndex_result result = new createIndex_result();
      receiveBase(result, "createIndex");
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      return;
    }

    public List<String> getIndexInfo(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_getIndexInfo(collectionName, security);
      return recv_getIndexInfo();
    }

    public void send_getIndexInfo(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getIndexInfo_args args = new getIndexInfo_args();
      args.setCollectionName(collectionName);
      args.setSecurity(security);
      sendBase("getIndexInfo", args);
    }

    public List<String> recv_getIndexInfo() throws EzMongoBaseException, org.apache.thrift.TException
    {
      getIndexInfo_result result = new getIndexInfo_result();
      receiveBase(result, "getIndexInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIndexInfo failed: unknown result");
    }

    public boolean collectionExists(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_collectionExists(collectionName, security);
      return recv_collectionExists();
    }

    public void send_collectionExists(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      collectionExists_args args = new collectionExists_args();
      args.setCollectionName(collectionName);
      args.setSecurity(security);
      sendBase("collectionExists", args);
    }

    public boolean recv_collectionExists() throws EzMongoBaseException, org.apache.thrift.TException
    {
      collectionExists_result result = new collectionExists_result();
      receiveBase(result, "collectionExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectionExists failed: unknown result");
    }

    public void createCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_createCollection(collectionName, security);
      recv_createCollection();
    }

    public void send_createCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      createCollection_args args = new createCollection_args();
      args.setCollectionName(collectionName);
      args.setSecurity(security);
      sendBase("createCollection", args);
    }

    public void recv_createCollection() throws EzMongoBaseException, org.apache.thrift.TException
    {
      createCollection_result result = new createCollection_result();
      receiveBase(result, "createCollection");
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      return;
    }

    public void dropCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_dropCollection(collectionName, security);
      recv_dropCollection();
    }

    public void send_dropCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      dropCollection_args args = new dropCollection_args();
      args.setCollectionName(collectionName);
      args.setSecurity(security);
      sendBase("dropCollection", args);
    }

    public void recv_dropCollection() throws EzMongoBaseException, org.apache.thrift.TException
    {
      dropCollection_result result = new dropCollection_result();
      receiveBase(result, "dropCollection");
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      return;
    }

    public long getCount(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_getCount(collectionName, security);
      return recv_getCount();
    }

    public void send_getCount(String collectionName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getCount_args args = new getCount_args();
      args.setCollectionName(collectionName);
      args.setSecurity(security);
      sendBase("getCount", args);
    }

    public long recv_getCount() throws EzMongoBaseException, org.apache.thrift.TException
    {
      getCount_result result = new getCount_result();
      receiveBase(result, "getCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCount failed: unknown result");
    }

    public long getCountFromQuery(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_getCountFromQuery(collectionName, jsonQuery, security);
      return recv_getCountFromQuery();
    }

    public void send_getCountFromQuery(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getCountFromQuery_args args = new getCountFromQuery_args();
      args.setCollectionName(collectionName);
      args.setJsonQuery(jsonQuery);
      args.setSecurity(security);
      sendBase("getCountFromQuery", args);
    }

    public long recv_getCountFromQuery() throws EzMongoBaseException, org.apache.thrift.TException
    {
      getCountFromQuery_result result = new getCountFromQuery_result();
      receiveBase(result, "getCountFromQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCountFromQuery failed: unknown result");
    }

    public List<String> textSearch(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_textSearch(collectionName, searchText, security);
      return recv_textSearch();
    }

    public void send_textSearch(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      textSearch_args args = new textSearch_args();
      args.setCollectionName(collectionName);
      args.setSearchText(searchText);
      args.setSecurity(security);
      sendBase("textSearch", args);
    }

    public List<String> recv_textSearch() throws EzMongoBaseException, org.apache.thrift.TException
    {
      textSearch_result result = new textSearch_result();
      receiveBase(result, "textSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "textSearch failed: unknown result");
    }

    public List<String> find(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_find(collectionName, mongoFindParams, security);
      return recv_find();
    }

    public void send_find(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      find_args args = new find_args();
      args.setCollectionName(collectionName);
      args.setMongoFindParams(mongoFindParams);
      args.setSecurity(security);
      sendBase("find", args);
    }

    public List<String> recv_find() throws EzMongoBaseException, org.apache.thrift.TException
    {
      find_result result = new find_result();
      receiveBase(result, "find");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "find failed: unknown result");
    }

    public List<String> distinct(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_distinct(collectionName, mongoDistinctParams, security);
      return recv_distinct();
    }

    public void send_distinct(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      distinct_args args = new distinct_args();
      args.setCollectionName(collectionName);
      args.setMongoDistinctParams(mongoDistinctParams);
      args.setSecurity(security);
      sendBase("distinct", args);
    }

    public List<String> recv_distinct() throws EzMongoBaseException, org.apache.thrift.TException
    {
      distinct_result result = new distinct_result();
      receiveBase(result, "distinct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "distinct failed: unknown result");
    }

    public String insert(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_insert(collectionName, mongoDocument, security);
      return recv_insert();
    }

    public void send_insert(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      insert_args args = new insert_args();
      args.setCollectionName(collectionName);
      args.setMongoDocument(mongoDocument);
      args.setSecurity(security);
      sendBase("insert", args);
    }

    public String recv_insert() throws EzMongoBaseException, org.apache.thrift.TException
    {
      insert_result result = new insert_result();
      receiveBase(result, "insert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insert failed: unknown result");
    }

    public int update(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_update(collectionName, mongoUpdateParams, security);
      return recv_update();
    }

    public void send_update(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setCollectionName(collectionName);
      args.setMongoUpdateParams(mongoUpdateParams);
      args.setSecurity(security);
      sendBase("update", args);
    }

    public int recv_update() throws EzMongoBaseException, org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

    public int remove(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws EzMongoBaseException, org.apache.thrift.TException
    {
      send_remove(collectionName, jsonQuery, security);
      return recv_remove();
    }

    public void send_remove(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      remove_args args = new remove_args();
      args.setCollectionName(collectionName);
      args.setJsonQuery(jsonQuery);
      args.setSecurity(security);
      sendBase("remove", args);
    }

    public int recv_remove() throws EzMongoBaseException, org.apache.thrift.TException
    {
      remove_result result = new remove_result();
      receiveBase(result, "remove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ezMongoBaseException != null) {
        throw result.ezMongoBaseException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "remove failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.data.base.thrift.BaseDataService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ensureIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ensureIndex_call method_call = new ensureIndex_call(collectionName, jsonKeys, jsonOptions, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ensureIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private String jsonKeys;
      private String jsonOptions;
      private ezbake.base.thrift.EzSecurityToken security;
      public ensureIndex_call(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.jsonKeys = jsonKeys;
        this.jsonOptions = jsonOptions;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ensureIndex_args args = new ensureIndex_args();
        args.setCollectionName(collectionName);
        args.setJsonKeys(jsonKeys);
        args.setJsonOptions(jsonOptions);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ensureIndex();
      }
    }

    public void createIndex(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createIndex_call method_call = new createIndex_call(collectionName, jsonKeys, jsonOptions, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private String jsonKeys;
      private String jsonOptions;
      private ezbake.base.thrift.EzSecurityToken security;
      public createIndex_call(String collectionName, String jsonKeys, String jsonOptions, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.jsonKeys = jsonKeys;
        this.jsonOptions = jsonOptions;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createIndex_args args = new createIndex_args();
        args.setCollectionName(collectionName);
        args.setJsonKeys(jsonKeys);
        args.setJsonOptions(jsonOptions);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createIndex();
      }
    }

    public void getIndexInfo(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIndexInfo_call method_call = new getIndexInfo_call(collectionName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIndexInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private ezbake.base.thrift.EzSecurityToken security;
      public getIndexInfo_call(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIndexInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIndexInfo_args args = new getIndexInfo_args();
        args.setCollectionName(collectionName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIndexInfo();
      }
    }

    public void collectionExists(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectionExists_call method_call = new collectionExists_call(collectionName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectionExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private ezbake.base.thrift.EzSecurityToken security;
      public collectionExists_call(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectionExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectionExists_args args = new collectionExists_args();
        args.setCollectionName(collectionName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectionExists();
      }
    }

    public void createCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCollection_call method_call = new createCollection_call(collectionName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCollection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private ezbake.base.thrift.EzSecurityToken security;
      public createCollection_call(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCollection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCollection_args args = new createCollection_args();
        args.setCollectionName(collectionName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createCollection();
      }
    }

    public void dropCollection(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dropCollection_call method_call = new dropCollection_call(collectionName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dropCollection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private ezbake.base.thrift.EzSecurityToken security;
      public dropCollection_call(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dropCollection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dropCollection_args args = new dropCollection_args();
        args.setCollectionName(collectionName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dropCollection();
      }
    }

    public void getCount(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCount_call method_call = new getCount_call(collectionName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private ezbake.base.thrift.EzSecurityToken security;
      public getCount_call(String collectionName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCount_args args = new getCount_args();
        args.setCollectionName(collectionName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCount();
      }
    }

    public void getCountFromQuery(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCountFromQuery_call method_call = new getCountFromQuery_call(collectionName, jsonQuery, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCountFromQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private String jsonQuery;
      private ezbake.base.thrift.EzSecurityToken security;
      public getCountFromQuery_call(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.jsonQuery = jsonQuery;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCountFromQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCountFromQuery_args args = new getCountFromQuery_args();
        args.setCollectionName(collectionName);
        args.setJsonQuery(jsonQuery);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCountFromQuery();
      }
    }

    public void textSearch(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      textSearch_call method_call = new textSearch_call(collectionName, searchText, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class textSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private String searchText;
      private ezbake.base.thrift.EzSecurityToken security;
      public textSearch_call(String collectionName, String searchText, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.searchText = searchText;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("textSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        textSearch_args args = new textSearch_args();
        args.setCollectionName(collectionName);
        args.setSearchText(searchText);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_textSearch();
      }
    }

    public void find(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      find_call method_call = new find_call(collectionName, mongoFindParams, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class find_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private MongoFindParams mongoFindParams;
      private ezbake.base.thrift.EzSecurityToken security;
      public find_call(String collectionName, MongoFindParams mongoFindParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.mongoFindParams = mongoFindParams;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("find", org.apache.thrift.protocol.TMessageType.CALL, 0));
        find_args args = new find_args();
        args.setCollectionName(collectionName);
        args.setMongoFindParams(mongoFindParams);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_find();
      }
    }

    public void distinct(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      distinct_call method_call = new distinct_call(collectionName, mongoDistinctParams, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class distinct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private MongoDistinctParams mongoDistinctParams;
      private ezbake.base.thrift.EzSecurityToken security;
      public distinct_call(String collectionName, MongoDistinctParams mongoDistinctParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.mongoDistinctParams = mongoDistinctParams;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("distinct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        distinct_args args = new distinct_args();
        args.setCollectionName(collectionName);
        args.setMongoDistinctParams(mongoDistinctParams);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_distinct();
      }
    }

    public void insert(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_call method_call = new insert_call(collectionName, mongoDocument, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private MongoEzbakeDocument mongoDocument;
      private ezbake.base.thrift.EzSecurityToken security;
      public insert_call(String collectionName, MongoEzbakeDocument mongoDocument, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.mongoDocument = mongoDocument;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_args args = new insert_args();
        args.setCollectionName(collectionName);
        args.setMongoDocument(mongoDocument);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insert();
      }
    }

    public void update(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(collectionName, mongoUpdateParams, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private MongoUpdateParams mongoUpdateParams;
      private ezbake.base.thrift.EzSecurityToken security;
      public update_call(String collectionName, MongoUpdateParams mongoUpdateParams, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.mongoUpdateParams = mongoUpdateParams;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setCollectionName(collectionName);
        args.setMongoUpdateParams(mongoUpdateParams);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update();
      }
    }

    public void remove(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_call method_call = new remove_call(collectionName, jsonQuery, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String collectionName;
      private String jsonQuery;
      private ezbake.base.thrift.EzSecurityToken security;
      public remove_call(String collectionName, String jsonQuery, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionName = collectionName;
        this.jsonQuery = jsonQuery;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setCollectionName(collectionName);
        args.setJsonQuery(jsonQuery);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws EzMongoBaseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_remove();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.data.base.thrift.BaseDataService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ensureIndex", new ensureIndex());
      processMap.put("createIndex", new createIndex());
      processMap.put("getIndexInfo", new getIndexInfo());
      processMap.put("collectionExists", new collectionExists());
      processMap.put("createCollection", new createCollection());
      processMap.put("dropCollection", new dropCollection());
      processMap.put("getCount", new getCount());
      processMap.put("getCountFromQuery", new getCountFromQuery());
      processMap.put("textSearch", new textSearch());
      processMap.put("find", new find());
      processMap.put("distinct", new distinct());
      processMap.put("insert", new insert());
      processMap.put("update", new update());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class ensureIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureIndex_args> {
      public ensureIndex() {
        super("ensureIndex");
      }

      public ensureIndex_args getEmptyArgsInstance() {
        return new ensureIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ensureIndex_result getResult(I iface, ensureIndex_args args) throws org.apache.thrift.TException {
        ensureIndex_result result = new ensureIndex_result();
        try {
          iface.ensureIndex(args.collectionName, args.jsonKeys, args.jsonOptions, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class createIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createIndex_args> {
      public createIndex() {
        super("createIndex");
      }

      public createIndex_args getEmptyArgsInstance() {
        return new createIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createIndex_result getResult(I iface, createIndex_args args) throws org.apache.thrift.TException {
        createIndex_result result = new createIndex_result();
        try {
          iface.createIndex(args.collectionName, args.jsonKeys, args.jsonOptions, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class getIndexInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIndexInfo_args> {
      public getIndexInfo() {
        super("getIndexInfo");
      }

      public getIndexInfo_args getEmptyArgsInstance() {
        return new getIndexInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIndexInfo_result getResult(I iface, getIndexInfo_args args) throws org.apache.thrift.TException {
        getIndexInfo_result result = new getIndexInfo_result();
        try {
          result.success = iface.getIndexInfo(args.collectionName, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class collectionExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectionExists_args> {
      public collectionExists() {
        super("collectionExists");
      }

      public collectionExists_args getEmptyArgsInstance() {
        return new collectionExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectionExists_result getResult(I iface, collectionExists_args args) throws org.apache.thrift.TException {
        collectionExists_result result = new collectionExists_result();
        try {
          result.success = iface.collectionExists(args.collectionName, args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class createCollection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCollection_args> {
      public createCollection() {
        super("createCollection");
      }

      public createCollection_args getEmptyArgsInstance() {
        return new createCollection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCollection_result getResult(I iface, createCollection_args args) throws org.apache.thrift.TException {
        createCollection_result result = new createCollection_result();
        try {
          iface.createCollection(args.collectionName, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class dropCollection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dropCollection_args> {
      public dropCollection() {
        super("dropCollection");
      }

      public dropCollection_args getEmptyArgsInstance() {
        return new dropCollection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dropCollection_result getResult(I iface, dropCollection_args args) throws org.apache.thrift.TException {
        dropCollection_result result = new dropCollection_result();
        try {
          iface.dropCollection(args.collectionName, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class getCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCount_args> {
      public getCount() {
        super("getCount");
      }

      public getCount_args getEmptyArgsInstance() {
        return new getCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCount_result getResult(I iface, getCount_args args) throws org.apache.thrift.TException {
        getCount_result result = new getCount_result();
        try {
          result.success = iface.getCount(args.collectionName, args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class getCountFromQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCountFromQuery_args> {
      public getCountFromQuery() {
        super("getCountFromQuery");
      }

      public getCountFromQuery_args getEmptyArgsInstance() {
        return new getCountFromQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCountFromQuery_result getResult(I iface, getCountFromQuery_args args) throws org.apache.thrift.TException {
        getCountFromQuery_result result = new getCountFromQuery_result();
        try {
          result.success = iface.getCountFromQuery(args.collectionName, args.jsonQuery, args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class textSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, textSearch_args> {
      public textSearch() {
        super("textSearch");
      }

      public textSearch_args getEmptyArgsInstance() {
        return new textSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public textSearch_result getResult(I iface, textSearch_args args) throws org.apache.thrift.TException {
        textSearch_result result = new textSearch_result();
        try {
          result.success = iface.textSearch(args.collectionName, args.searchText, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class find<I extends Iface> extends org.apache.thrift.ProcessFunction<I, find_args> {
      public find() {
        super("find");
      }

      public find_args getEmptyArgsInstance() {
        return new find_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public find_result getResult(I iface, find_args args) throws org.apache.thrift.TException {
        find_result result = new find_result();
        try {
          result.success = iface.find(args.collectionName, args.mongoFindParams, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class distinct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, distinct_args> {
      public distinct() {
        super("distinct");
      }

      public distinct_args getEmptyArgsInstance() {
        return new distinct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public distinct_result getResult(I iface, distinct_args args) throws org.apache.thrift.TException {
        distinct_result result = new distinct_result();
        try {
          result.success = iface.distinct(args.collectionName, args.mongoDistinctParams, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class insert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insert_args> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insert_result getResult(I iface, insert_args args) throws org.apache.thrift.TException {
        insert_result result = new insert_result();
        try {
          result.success = iface.insert(args.collectionName, args.mongoDocument, args.security);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        try {
          result.success = iface.update(args.collectionName, args.mongoUpdateParams, args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

    public static class remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_args> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public remove_result getResult(I iface, remove_args args) throws org.apache.thrift.TException {
        remove_result result = new remove_result();
        try {
          result.success = iface.remove(args.collectionName, args.jsonQuery, args.security);
          result.setSuccessIsSet(true);
        } catch (EzMongoBaseException ezMongoBaseException) {
          result.ezMongoBaseException = ezMongoBaseException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.data.base.thrift.BaseDataService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ensureIndex", new ensureIndex());
      processMap.put("createIndex", new createIndex());
      processMap.put("getIndexInfo", new getIndexInfo());
      processMap.put("collectionExists", new collectionExists());
      processMap.put("createCollection", new createCollection());
      processMap.put("dropCollection", new dropCollection());
      processMap.put("getCount", new getCount());
      processMap.put("getCountFromQuery", new getCountFromQuery());
      processMap.put("textSearch", new textSearch());
      processMap.put("find", new find());
      processMap.put("distinct", new distinct());
      processMap.put("insert", new insert());
      processMap.put("update", new update());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class ensureIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ensureIndex_args, Void> {
      public ensureIndex() {
        super("ensureIndex");
      }

      public ensureIndex_args getEmptyArgsInstance() {
        return new ensureIndex_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ensureIndex_result result = new ensureIndex_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ensureIndex_result result = new ensureIndex_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ensureIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ensureIndex(args.collectionName, args.jsonKeys, args.jsonOptions, args.security,resultHandler);
      }
    }

    public static class createIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createIndex_args, Void> {
      public createIndex() {
        super("createIndex");
      }

      public createIndex_args getEmptyArgsInstance() {
        return new createIndex_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createIndex_result result = new createIndex_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createIndex_result result = new createIndex_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createIndex(args.collectionName, args.jsonKeys, args.jsonOptions, args.security,resultHandler);
      }
    }

    public static class getIndexInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIndexInfo_args, List<String>> {
      public getIndexInfo() {
        super("getIndexInfo");
      }

      public getIndexInfo_args getEmptyArgsInstance() {
        return new getIndexInfo_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getIndexInfo_result result = new getIndexInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIndexInfo_result result = new getIndexInfo_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIndexInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getIndexInfo(args.collectionName, args.security,resultHandler);
      }
    }

    public static class collectionExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectionExists_args, Boolean> {
      public collectionExists() {
        super("collectionExists");
      }

      public collectionExists_args getEmptyArgsInstance() {
        return new collectionExists_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            collectionExists_result result = new collectionExists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            collectionExists_result result = new collectionExists_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectionExists_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.collectionExists(args.collectionName, args.security,resultHandler);
      }
    }

    public static class createCollection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCollection_args, Void> {
      public createCollection() {
        super("createCollection");
      }

      public createCollection_args getEmptyArgsInstance() {
        return new createCollection_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createCollection_result result = new createCollection_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCollection_result result = new createCollection_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCollection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createCollection(args.collectionName, args.security,resultHandler);
      }
    }

    public static class dropCollection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dropCollection_args, Void> {
      public dropCollection() {
        super("dropCollection");
      }

      public dropCollection_args getEmptyArgsInstance() {
        return new dropCollection_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dropCollection_result result = new dropCollection_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dropCollection_result result = new dropCollection_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dropCollection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.dropCollection(args.collectionName, args.security,resultHandler);
      }
    }

    public static class getCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCount_args, Long> {
      public getCount() {
        super("getCount");
      }

      public getCount_args getEmptyArgsInstance() {
        return new getCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getCount_result result = new getCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCount_result result = new getCount_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getCount(args.collectionName, args.security,resultHandler);
      }
    }

    public static class getCountFromQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCountFromQuery_args, Long> {
      public getCountFromQuery() {
        super("getCountFromQuery");
      }

      public getCountFromQuery_args getEmptyArgsInstance() {
        return new getCountFromQuery_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getCountFromQuery_result result = new getCountFromQuery_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCountFromQuery_result result = new getCountFromQuery_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCountFromQuery_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getCountFromQuery(args.collectionName, args.jsonQuery, args.security,resultHandler);
      }
    }

    public static class textSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, textSearch_args, List<String>> {
      public textSearch() {
        super("textSearch");
      }

      public textSearch_args getEmptyArgsInstance() {
        return new textSearch_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            textSearch_result result = new textSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            textSearch_result result = new textSearch_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, textSearch_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.textSearch(args.collectionName, args.searchText, args.security,resultHandler);
      }
    }

    public static class find<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, find_args, List<String>> {
      public find() {
        super("find");
      }

      public find_args getEmptyArgsInstance() {
        return new find_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            find_result result = new find_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            find_result result = new find_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, find_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.find(args.collectionName, args.mongoFindParams, args.security,resultHandler);
      }
    }

    public static class distinct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, distinct_args, List<String>> {
      public distinct() {
        super("distinct");
      }

      public distinct_args getEmptyArgsInstance() {
        return new distinct_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            distinct_result result = new distinct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            distinct_result result = new distinct_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, distinct_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.distinct(args.collectionName, args.mongoDistinctParams, args.security,resultHandler);
      }
    }

    public static class insert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insert_args, String> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            insert_result result = new insert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insert_result result = new insert_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insert_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.insert(args.collectionName, args.mongoDocument, args.security,resultHandler);
      }
    }

    public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, Integer> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_result result = new update_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_result result = new update_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update(args.collectionName, args.mongoUpdateParams, args.security,resultHandler);
      }
    }

    public static class remove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, remove_args, Integer> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            remove_result result = new remove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            remove_result result = new remove_result();
            if (e instanceof EzMongoBaseException) {
                        result.ezMongoBaseException = (EzMongoBaseException) e;
                        result.setEzMongoBaseExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, remove_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.remove(args.collectionName, args.jsonQuery, args.security,resultHandler);
      }
    }

  }

  public static class ensureIndex_args implements org.apache.thrift.TBase<ensureIndex_args, ensureIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<ensureIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureIndex_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonKeys", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonOptions", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ensureIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ensureIndex_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public String jsonKeys; // required
    public String jsonOptions; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      JSON_KEYS((short)2, "jsonKeys"),
      JSON_OPTIONS((short)3, "jsonOptions"),
      SECURITY((short)4, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // JSON_KEYS
            return JSON_KEYS;
          case 3: // JSON_OPTIONS
            return JSON_OPTIONS;
          case 4: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_KEYS, new org.apache.thrift.meta_data.FieldMetaData("jsonKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("jsonOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureIndex_args.class, metaDataMap);
    }

    public ensureIndex_args() {
    }

    public ensureIndex_args(
      String collectionName,
      String jsonKeys,
      String jsonOptions,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.jsonKeys = jsonKeys;
      this.jsonOptions = jsonOptions;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureIndex_args(ensureIndex_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetJsonKeys()) {
        this.jsonKeys = other.jsonKeys;
      }
      if (other.isSetJsonOptions()) {
        this.jsonOptions = other.jsonOptions;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public ensureIndex_args deepCopy() {
      return new ensureIndex_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.jsonKeys = null;
      this.jsonOptions = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public ensureIndex_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public String getJsonKeys() {
      return this.jsonKeys;
    }

    public ensureIndex_args setJsonKeys(String jsonKeys) {
      this.jsonKeys = jsonKeys;
      return this;
    }

    public void unsetJsonKeys() {
      this.jsonKeys = null;
    }

    /** Returns true if field jsonKeys is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonKeys() {
      return this.jsonKeys != null;
    }

    public void setJsonKeysIsSet(boolean value) {
      if (!value) {
        this.jsonKeys = null;
      }
    }

    public String getJsonOptions() {
      return this.jsonOptions;
    }

    public ensureIndex_args setJsonOptions(String jsonOptions) {
      this.jsonOptions = jsonOptions;
      return this;
    }

    public void unsetJsonOptions() {
      this.jsonOptions = null;
    }

    /** Returns true if field jsonOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonOptions() {
      return this.jsonOptions != null;
    }

    public void setJsonOptionsIsSet(boolean value) {
      if (!value) {
        this.jsonOptions = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public ensureIndex_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case JSON_KEYS:
        if (value == null) {
          unsetJsonKeys();
        } else {
          setJsonKeys((String)value);
        }
        break;

      case JSON_OPTIONS:
        if (value == null) {
          unsetJsonOptions();
        } else {
          setJsonOptions((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case JSON_KEYS:
        return getJsonKeys();

      case JSON_OPTIONS:
        return getJsonOptions();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case JSON_KEYS:
        return isSetJsonKeys();
      case JSON_OPTIONS:
        return isSetJsonOptions();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureIndex_args)
        return this.equals((ensureIndex_args)that);
      return false;
    }

    public boolean equals(ensureIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_jsonKeys = true && this.isSetJsonKeys();
      boolean that_present_jsonKeys = true && that.isSetJsonKeys();
      if (this_present_jsonKeys || that_present_jsonKeys) {
        if (!(this_present_jsonKeys && that_present_jsonKeys))
          return false;
        if (!this.jsonKeys.equals(that.jsonKeys))
          return false;
      }

      boolean this_present_jsonOptions = true && this.isSetJsonOptions();
      boolean that_present_jsonOptions = true && that.isSetJsonOptions();
      if (this_present_jsonOptions || that_present_jsonOptions) {
        if (!(this_present_jsonOptions && that_present_jsonOptions))
          return false;
        if (!this.jsonOptions.equals(that.jsonOptions))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_jsonKeys = true && (isSetJsonKeys());
      builder.append(present_jsonKeys);
      if (present_jsonKeys)
        builder.append(jsonKeys);

      boolean present_jsonOptions = true && (isSetJsonOptions());
      builder.append(present_jsonOptions);
      if (present_jsonOptions)
        builder.append(jsonOptions);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(ensureIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonKeys()).compareTo(other.isSetJsonKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonKeys, other.jsonKeys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonOptions()).compareTo(other.isSetJsonOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonOptions, other.jsonOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ensureIndex_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonKeys:");
      if (this.jsonKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonKeys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonOptions:");
      if (this.jsonOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonOptions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureIndex_argsStandardSchemeFactory implements SchemeFactory {
      public ensureIndex_argsStandardScheme getScheme() {
        return new ensureIndex_argsStandardScheme();
      }
    }

    private static class ensureIndex_argsStandardScheme extends StandardScheme<ensureIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonKeys = iprot.readString();
                struct.setJsonKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonOptions = iprot.readString();
                struct.setJsonOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonKeys != null) {
          oprot.writeFieldBegin(JSON_KEYS_FIELD_DESC);
          oprot.writeString(struct.jsonKeys);
          oprot.writeFieldEnd();
        }
        if (struct.jsonOptions != null) {
          oprot.writeFieldBegin(JSON_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.jsonOptions);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureIndex_argsTupleSchemeFactory implements SchemeFactory {
      public ensureIndex_argsTupleScheme getScheme() {
        return new ensureIndex_argsTupleScheme();
      }
    }

    private static class ensureIndex_argsTupleScheme extends TupleScheme<ensureIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetJsonKeys()) {
          optionals.set(1);
        }
        if (struct.isSetJsonOptions()) {
          optionals.set(2);
        }
        if (struct.isSetSecurity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetJsonKeys()) {
          oprot.writeString(struct.jsonKeys);
        }
        if (struct.isSetJsonOptions()) {
          oprot.writeString(struct.jsonOptions);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonKeys = iprot.readString();
          struct.setJsonKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonOptions = iprot.readString();
          struct.setJsonOptionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class ensureIndex_result implements org.apache.thrift.TBase<ensureIndex_result, ensureIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<ensureIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureIndex_result");

    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ensureIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ensureIndex_resultTupleSchemeFactory());
    }

    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureIndex_result.class, metaDataMap);
    }

    public ensureIndex_result() {
    }

    public ensureIndex_result(
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureIndex_result(ensureIndex_result other) {
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public ensureIndex_result deepCopy() {
      return new ensureIndex_result(this);
    }

    @Override
    public void clear() {
      this.ezMongoBaseException = null;
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public ensureIndex_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureIndex_result)
        return this.equals((ensureIndex_result)that);
      return false;
    }

    public boolean equals(ensureIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(ensureIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ensureIndex_result(");
      boolean first = true;

      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureIndex_resultStandardSchemeFactory implements SchemeFactory {
      public ensureIndex_resultStandardScheme getScheme() {
        return new ensureIndex_resultStandardScheme();
      }
    }

    private static class ensureIndex_resultStandardScheme extends StandardScheme<ensureIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureIndex_resultTupleSchemeFactory implements SchemeFactory {
      public ensureIndex_resultTupleScheme getScheme() {
        return new ensureIndex_resultTupleScheme();
      }
    }

    private static class ensureIndex_resultTupleScheme extends TupleScheme<ensureIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class createIndex_args implements org.apache.thrift.TBase<createIndex_args, createIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<createIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndex_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonKeys", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonOptions", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndex_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public String jsonKeys; // required
    public String jsonOptions; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      JSON_KEYS((short)2, "jsonKeys"),
      JSON_OPTIONS((short)3, "jsonOptions"),
      SECURITY((short)4, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // JSON_KEYS
            return JSON_KEYS;
          case 3: // JSON_OPTIONS
            return JSON_OPTIONS;
          case 4: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_KEYS, new org.apache.thrift.meta_data.FieldMetaData("jsonKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("jsonOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndex_args.class, metaDataMap);
    }

    public createIndex_args() {
    }

    public createIndex_args(
      String collectionName,
      String jsonKeys,
      String jsonOptions,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.jsonKeys = jsonKeys;
      this.jsonOptions = jsonOptions;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndex_args(createIndex_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetJsonKeys()) {
        this.jsonKeys = other.jsonKeys;
      }
      if (other.isSetJsonOptions()) {
        this.jsonOptions = other.jsonOptions;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public createIndex_args deepCopy() {
      return new createIndex_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.jsonKeys = null;
      this.jsonOptions = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public createIndex_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public String getJsonKeys() {
      return this.jsonKeys;
    }

    public createIndex_args setJsonKeys(String jsonKeys) {
      this.jsonKeys = jsonKeys;
      return this;
    }

    public void unsetJsonKeys() {
      this.jsonKeys = null;
    }

    /** Returns true if field jsonKeys is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonKeys() {
      return this.jsonKeys != null;
    }

    public void setJsonKeysIsSet(boolean value) {
      if (!value) {
        this.jsonKeys = null;
      }
    }

    public String getJsonOptions() {
      return this.jsonOptions;
    }

    public createIndex_args setJsonOptions(String jsonOptions) {
      this.jsonOptions = jsonOptions;
      return this;
    }

    public void unsetJsonOptions() {
      this.jsonOptions = null;
    }

    /** Returns true if field jsonOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonOptions() {
      return this.jsonOptions != null;
    }

    public void setJsonOptionsIsSet(boolean value) {
      if (!value) {
        this.jsonOptions = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public createIndex_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case JSON_KEYS:
        if (value == null) {
          unsetJsonKeys();
        } else {
          setJsonKeys((String)value);
        }
        break;

      case JSON_OPTIONS:
        if (value == null) {
          unsetJsonOptions();
        } else {
          setJsonOptions((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case JSON_KEYS:
        return getJsonKeys();

      case JSON_OPTIONS:
        return getJsonOptions();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case JSON_KEYS:
        return isSetJsonKeys();
      case JSON_OPTIONS:
        return isSetJsonOptions();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndex_args)
        return this.equals((createIndex_args)that);
      return false;
    }

    public boolean equals(createIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_jsonKeys = true && this.isSetJsonKeys();
      boolean that_present_jsonKeys = true && that.isSetJsonKeys();
      if (this_present_jsonKeys || that_present_jsonKeys) {
        if (!(this_present_jsonKeys && that_present_jsonKeys))
          return false;
        if (!this.jsonKeys.equals(that.jsonKeys))
          return false;
      }

      boolean this_present_jsonOptions = true && this.isSetJsonOptions();
      boolean that_present_jsonOptions = true && that.isSetJsonOptions();
      if (this_present_jsonOptions || that_present_jsonOptions) {
        if (!(this_present_jsonOptions && that_present_jsonOptions))
          return false;
        if (!this.jsonOptions.equals(that.jsonOptions))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_jsonKeys = true && (isSetJsonKeys());
      builder.append(present_jsonKeys);
      if (present_jsonKeys)
        builder.append(jsonKeys);

      boolean present_jsonOptions = true && (isSetJsonOptions());
      builder.append(present_jsonOptions);
      if (present_jsonOptions)
        builder.append(jsonOptions);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonKeys()).compareTo(other.isSetJsonKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonKeys, other.jsonKeys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonOptions()).compareTo(other.isSetJsonOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonOptions, other.jsonOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndex_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonKeys:");
      if (this.jsonKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonKeys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonOptions:");
      if (this.jsonOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonOptions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndex_argsStandardSchemeFactory implements SchemeFactory {
      public createIndex_argsStandardScheme getScheme() {
        return new createIndex_argsStandardScheme();
      }
    }

    private static class createIndex_argsStandardScheme extends StandardScheme<createIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonKeys = iprot.readString();
                struct.setJsonKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonOptions = iprot.readString();
                struct.setJsonOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonKeys != null) {
          oprot.writeFieldBegin(JSON_KEYS_FIELD_DESC);
          oprot.writeString(struct.jsonKeys);
          oprot.writeFieldEnd();
        }
        if (struct.jsonOptions != null) {
          oprot.writeFieldBegin(JSON_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.jsonOptions);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndex_argsTupleSchemeFactory implements SchemeFactory {
      public createIndex_argsTupleScheme getScheme() {
        return new createIndex_argsTupleScheme();
      }
    }

    private static class createIndex_argsTupleScheme extends TupleScheme<createIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetJsonKeys()) {
          optionals.set(1);
        }
        if (struct.isSetJsonOptions()) {
          optionals.set(2);
        }
        if (struct.isSetSecurity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetJsonKeys()) {
          oprot.writeString(struct.jsonKeys);
        }
        if (struct.isSetJsonOptions()) {
          oprot.writeString(struct.jsonOptions);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonKeys = iprot.readString();
          struct.setJsonKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonOptions = iprot.readString();
          struct.setJsonOptionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class createIndex_result implements org.apache.thrift.TBase<createIndex_result, createIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<createIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIndex_result");

    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIndex_resultTupleSchemeFactory());
    }

    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIndex_result.class, metaDataMap);
    }

    public createIndex_result() {
    }

    public createIndex_result(
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIndex_result(createIndex_result other) {
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public createIndex_result deepCopy() {
      return new createIndex_result(this);
    }

    @Override
    public void clear() {
      this.ezMongoBaseException = null;
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public createIndex_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIndex_result)
        return this.equals((createIndex_result)that);
      return false;
    }

    public boolean equals(createIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIndex_result(");
      boolean first = true;

      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIndex_resultStandardSchemeFactory implements SchemeFactory {
      public createIndex_resultStandardScheme getScheme() {
        return new createIndex_resultStandardScheme();
      }
    }

    private static class createIndex_resultStandardScheme extends StandardScheme<createIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIndex_resultTupleSchemeFactory implements SchemeFactory {
      public createIndex_resultTupleScheme getScheme() {
        return new createIndex_resultTupleScheme();
      }
    }

    private static class createIndex_resultTupleScheme extends TupleScheme<createIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class getIndexInfo_args implements org.apache.thrift.TBase<getIndexInfo_args, getIndexInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexInfo_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexInfo_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexInfo_args.class, metaDataMap);
    }

    public getIndexInfo_args() {
    }

    public getIndexInfo_args(
      String collectionName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexInfo_args(getIndexInfo_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getIndexInfo_args deepCopy() {
      return new getIndexInfo_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public getIndexInfo_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getIndexInfo_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexInfo_args)
        return this.equals((getIndexInfo_args)that);
      return false;
    }

    public boolean equals(getIndexInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getIndexInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexInfo_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getIndexInfo_argsStandardScheme getScheme() {
        return new getIndexInfo_argsStandardScheme();
      }
    }

    private static class getIndexInfo_argsStandardScheme extends StandardScheme<getIndexInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getIndexInfo_argsTupleScheme getScheme() {
        return new getIndexInfo_argsTupleScheme();
      }
    }

    private static class getIndexInfo_argsTupleScheme extends TupleScheme<getIndexInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getIndexInfo_result implements org.apache.thrift.TBase<getIndexInfo_result, getIndexInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexInfo_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexInfo_result.class, metaDataMap);
    }

    public getIndexInfo_result() {
    }

    public getIndexInfo_result(
      List<String> success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexInfo_result(getIndexInfo_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public getIndexInfo_result deepCopy() {
      return new getIndexInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ezMongoBaseException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getIndexInfo_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public getIndexInfo_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexInfo_result)
        return this.equals((getIndexInfo_result)that);
      return false;
    }

    public boolean equals(getIndexInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getIndexInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getIndexInfo_resultStandardScheme getScheme() {
        return new getIndexInfo_resultStandardScheme();
      }
    }

    private static class getIndexInfo_resultStandardScheme extends StandardScheme<getIndexInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getIndexInfo_resultTupleScheme getScheme() {
        return new getIndexInfo_resultTupleScheme();
      }
    }

    private static class getIndexInfo_resultTupleScheme extends TupleScheme<getIndexInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class collectionExists_args implements org.apache.thrift.TBase<collectionExists_args, collectionExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectionExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectionExists_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectionExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectionExists_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectionExists_args.class, metaDataMap);
    }

    public collectionExists_args() {
    }

    public collectionExists_args(
      String collectionName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectionExists_args(collectionExists_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public collectionExists_args deepCopy() {
      return new collectionExists_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public collectionExists_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public collectionExists_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectionExists_args)
        return this.equals((collectionExists_args)that);
      return false;
    }

    public boolean equals(collectionExists_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(collectionExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectionExists_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectionExists_argsStandardSchemeFactory implements SchemeFactory {
      public collectionExists_argsStandardScheme getScheme() {
        return new collectionExists_argsStandardScheme();
      }
    }

    private static class collectionExists_argsStandardScheme extends StandardScheme<collectionExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectionExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectionExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectionExists_argsTupleSchemeFactory implements SchemeFactory {
      public collectionExists_argsTupleScheme getScheme() {
        return new collectionExists_argsTupleScheme();
      }
    }

    private static class collectionExists_argsTupleScheme extends TupleScheme<collectionExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectionExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectionExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class collectionExists_result implements org.apache.thrift.TBase<collectionExists_result, collectionExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectionExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectionExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectionExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectionExists_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectionExists_result.class, metaDataMap);
    }

    public collectionExists_result() {
    }

    public collectionExists_result(
      boolean success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectionExists_result(collectionExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public collectionExists_result deepCopy() {
      return new collectionExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ezMongoBaseException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public collectionExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public collectionExists_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectionExists_result)
        return this.equals((collectionExists_result)that);
      return false;
    }

    public boolean equals(collectionExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(collectionExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectionExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectionExists_resultStandardSchemeFactory implements SchemeFactory {
      public collectionExists_resultStandardScheme getScheme() {
        return new collectionExists_resultStandardScheme();
      }
    }

    private static class collectionExists_resultStandardScheme extends StandardScheme<collectionExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectionExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectionExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectionExists_resultTupleSchemeFactory implements SchemeFactory {
      public collectionExists_resultTupleScheme getScheme() {
        return new collectionExists_resultTupleScheme();
      }
    }

    private static class collectionExists_resultTupleScheme extends TupleScheme<collectionExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectionExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectionExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class createCollection_args implements org.apache.thrift.TBase<createCollection_args, createCollection_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCollection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCollection_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCollection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCollection_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCollection_args.class, metaDataMap);
    }

    public createCollection_args() {
    }

    public createCollection_args(
      String collectionName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCollection_args(createCollection_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public createCollection_args deepCopy() {
      return new createCollection_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public createCollection_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public createCollection_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCollection_args)
        return this.equals((createCollection_args)that);
      return false;
    }

    public boolean equals(createCollection_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCollection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCollection_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCollection_argsStandardSchemeFactory implements SchemeFactory {
      public createCollection_argsStandardScheme getScheme() {
        return new createCollection_argsStandardScheme();
      }
    }

    private static class createCollection_argsStandardScheme extends StandardScheme<createCollection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCollection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCollection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCollection_argsTupleSchemeFactory implements SchemeFactory {
      public createCollection_argsTupleScheme getScheme() {
        return new createCollection_argsTupleScheme();
      }
    }

    private static class createCollection_argsTupleScheme extends TupleScheme<createCollection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class createCollection_result implements org.apache.thrift.TBase<createCollection_result, createCollection_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCollection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCollection_result");

    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCollection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCollection_resultTupleSchemeFactory());
    }

    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCollection_result.class, metaDataMap);
    }

    public createCollection_result() {
    }

    public createCollection_result(
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCollection_result(createCollection_result other) {
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public createCollection_result deepCopy() {
      return new createCollection_result(this);
    }

    @Override
    public void clear() {
      this.ezMongoBaseException = null;
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public createCollection_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCollection_result)
        return this.equals((createCollection_result)that);
      return false;
    }

    public boolean equals(createCollection_result that) {
      if (that == null)
        return false;

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createCollection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCollection_result(");
      boolean first = true;

      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCollection_resultStandardSchemeFactory implements SchemeFactory {
      public createCollection_resultStandardScheme getScheme() {
        return new createCollection_resultStandardScheme();
      }
    }

    private static class createCollection_resultStandardScheme extends StandardScheme<createCollection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCollection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCollection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCollection_resultTupleSchemeFactory implements SchemeFactory {
      public createCollection_resultTupleScheme getScheme() {
        return new createCollection_resultTupleScheme();
      }
    }

    private static class createCollection_resultTupleScheme extends TupleScheme<createCollection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class dropCollection_args implements org.apache.thrift.TBase<dropCollection_args, dropCollection_args._Fields>, java.io.Serializable, Cloneable, Comparable<dropCollection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dropCollection_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dropCollection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dropCollection_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dropCollection_args.class, metaDataMap);
    }

    public dropCollection_args() {
    }

    public dropCollection_args(
      String collectionName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropCollection_args(dropCollection_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public dropCollection_args deepCopy() {
      return new dropCollection_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public dropCollection_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public dropCollection_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropCollection_args)
        return this.equals((dropCollection_args)that);
      return false;
    }

    public boolean equals(dropCollection_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(dropCollection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropCollection_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropCollection_argsStandardSchemeFactory implements SchemeFactory {
      public dropCollection_argsStandardScheme getScheme() {
        return new dropCollection_argsStandardScheme();
      }
    }

    private static class dropCollection_argsStandardScheme extends StandardScheme<dropCollection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dropCollection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dropCollection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropCollection_argsTupleSchemeFactory implements SchemeFactory {
      public dropCollection_argsTupleScheme getScheme() {
        return new dropCollection_argsTupleScheme();
      }
    }

    private static class dropCollection_argsTupleScheme extends TupleScheme<dropCollection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dropCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dropCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class dropCollection_result implements org.apache.thrift.TBase<dropCollection_result, dropCollection_result._Fields>, java.io.Serializable, Cloneable, Comparable<dropCollection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dropCollection_result");

    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dropCollection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dropCollection_resultTupleSchemeFactory());
    }

    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dropCollection_result.class, metaDataMap);
    }

    public dropCollection_result() {
    }

    public dropCollection_result(
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropCollection_result(dropCollection_result other) {
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public dropCollection_result deepCopy() {
      return new dropCollection_result(this);
    }

    @Override
    public void clear() {
      this.ezMongoBaseException = null;
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public dropCollection_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropCollection_result)
        return this.equals((dropCollection_result)that);
      return false;
    }

    public boolean equals(dropCollection_result that) {
      if (that == null)
        return false;

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(dropCollection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropCollection_result(");
      boolean first = true;

      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropCollection_resultStandardSchemeFactory implements SchemeFactory {
      public dropCollection_resultStandardScheme getScheme() {
        return new dropCollection_resultStandardScheme();
      }
    }

    private static class dropCollection_resultStandardScheme extends StandardScheme<dropCollection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dropCollection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dropCollection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropCollection_resultTupleSchemeFactory implements SchemeFactory {
      public dropCollection_resultTupleScheme getScheme() {
        return new dropCollection_resultTupleScheme();
      }
    }

    private static class dropCollection_resultTupleScheme extends TupleScheme<dropCollection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dropCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dropCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class getCount_args implements org.apache.thrift.TBase<getCount_args, getCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCount_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCount_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCount_args.class, metaDataMap);
    }

    public getCount_args() {
    }

    public getCount_args(
      String collectionName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCount_args(getCount_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getCount_args deepCopy() {
      return new getCount_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public getCount_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getCount_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCount_args)
        return this.equals((getCount_args)that);
      return false;
    }

    public boolean equals(getCount_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCount_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCount_argsStandardSchemeFactory implements SchemeFactory {
      public getCount_argsStandardScheme getScheme() {
        return new getCount_argsStandardScheme();
      }
    }

    private static class getCount_argsStandardScheme extends StandardScheme<getCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCount_argsTupleSchemeFactory implements SchemeFactory {
      public getCount_argsTupleScheme getScheme() {
        return new getCount_argsTupleScheme();
      }
    }

    private static class getCount_argsTupleScheme extends TupleScheme<getCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getCount_result implements org.apache.thrift.TBase<getCount_result, getCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCount_resultTupleSchemeFactory());
    }

    public long success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCount_result.class, metaDataMap);
    }

    public getCount_result() {
    }

    public getCount_result(
      long success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCount_result(getCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public getCount_result deepCopy() {
      return new getCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ezMongoBaseException = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public getCount_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCount_result)
        return this.equals((getCount_result)that);
      return false;
    }

    public boolean equals(getCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCount_resultStandardSchemeFactory implements SchemeFactory {
      public getCount_resultStandardScheme getScheme() {
        return new getCount_resultStandardScheme();
      }
    }

    private static class getCount_resultStandardScheme extends StandardScheme<getCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCount_resultTupleSchemeFactory implements SchemeFactory {
      public getCount_resultTupleScheme getScheme() {
        return new getCount_resultTupleScheme();
      }
    }

    private static class getCount_resultTupleScheme extends TupleScheme<getCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class getCountFromQuery_args implements org.apache.thrift.TBase<getCountFromQuery_args, getCountFromQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCountFromQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountFromQuery_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonQuery", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountFromQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountFromQuery_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public String jsonQuery; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      JSON_QUERY((short)2, "jsonQuery"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // JSON_QUERY
            return JSON_QUERY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_QUERY, new org.apache.thrift.meta_data.FieldMetaData("jsonQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountFromQuery_args.class, metaDataMap);
    }

    public getCountFromQuery_args() {
    }

    public getCountFromQuery_args(
      String collectionName,
      String jsonQuery,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.jsonQuery = jsonQuery;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountFromQuery_args(getCountFromQuery_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetJsonQuery()) {
        this.jsonQuery = other.jsonQuery;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getCountFromQuery_args deepCopy() {
      return new getCountFromQuery_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.jsonQuery = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public getCountFromQuery_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public String getJsonQuery() {
      return this.jsonQuery;
    }

    public getCountFromQuery_args setJsonQuery(String jsonQuery) {
      this.jsonQuery = jsonQuery;
      return this;
    }

    public void unsetJsonQuery() {
      this.jsonQuery = null;
    }

    /** Returns true if field jsonQuery is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonQuery() {
      return this.jsonQuery != null;
    }

    public void setJsonQueryIsSet(boolean value) {
      if (!value) {
        this.jsonQuery = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getCountFromQuery_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case JSON_QUERY:
        if (value == null) {
          unsetJsonQuery();
        } else {
          setJsonQuery((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case JSON_QUERY:
        return getJsonQuery();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case JSON_QUERY:
        return isSetJsonQuery();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountFromQuery_args)
        return this.equals((getCountFromQuery_args)that);
      return false;
    }

    public boolean equals(getCountFromQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_jsonQuery = true && this.isSetJsonQuery();
      boolean that_present_jsonQuery = true && that.isSetJsonQuery();
      if (this_present_jsonQuery || that_present_jsonQuery) {
        if (!(this_present_jsonQuery && that_present_jsonQuery))
          return false;
        if (!this.jsonQuery.equals(that.jsonQuery))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_jsonQuery = true && (isSetJsonQuery());
      builder.append(present_jsonQuery);
      if (present_jsonQuery)
        builder.append(jsonQuery);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getCountFromQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonQuery()).compareTo(other.isSetJsonQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonQuery, other.jsonQuery);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountFromQuery_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonQuery:");
      if (this.jsonQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonQuery);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountFromQuery_argsStandardSchemeFactory implements SchemeFactory {
      public getCountFromQuery_argsStandardScheme getScheme() {
        return new getCountFromQuery_argsStandardScheme();
      }
    }

    private static class getCountFromQuery_argsStandardScheme extends StandardScheme<getCountFromQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountFromQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonQuery = iprot.readString();
                struct.setJsonQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountFromQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonQuery != null) {
          oprot.writeFieldBegin(JSON_QUERY_FIELD_DESC);
          oprot.writeString(struct.jsonQuery);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountFromQuery_argsTupleSchemeFactory implements SchemeFactory {
      public getCountFromQuery_argsTupleScheme getScheme() {
        return new getCountFromQuery_argsTupleScheme();
      }
    }

    private static class getCountFromQuery_argsTupleScheme extends TupleScheme<getCountFromQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountFromQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetJsonQuery()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetJsonQuery()) {
          oprot.writeString(struct.jsonQuery);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountFromQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonQuery = iprot.readString();
          struct.setJsonQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getCountFromQuery_result implements org.apache.thrift.TBase<getCountFromQuery_result, getCountFromQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCountFromQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountFromQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountFromQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountFromQuery_resultTupleSchemeFactory());
    }

    public long success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountFromQuery_result.class, metaDataMap);
    }

    public getCountFromQuery_result() {
    }

    public getCountFromQuery_result(
      long success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountFromQuery_result(getCountFromQuery_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public getCountFromQuery_result deepCopy() {
      return new getCountFromQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ezMongoBaseException = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getCountFromQuery_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public getCountFromQuery_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountFromQuery_result)
        return this.equals((getCountFromQuery_result)that);
      return false;
    }

    public boolean equals(getCountFromQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getCountFromQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountFromQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountFromQuery_resultStandardSchemeFactory implements SchemeFactory {
      public getCountFromQuery_resultStandardScheme getScheme() {
        return new getCountFromQuery_resultStandardScheme();
      }
    }

    private static class getCountFromQuery_resultStandardScheme extends StandardScheme<getCountFromQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountFromQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountFromQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountFromQuery_resultTupleSchemeFactory implements SchemeFactory {
      public getCountFromQuery_resultTupleScheme getScheme() {
        return new getCountFromQuery_resultTupleScheme();
      }
    }

    private static class getCountFromQuery_resultTupleScheme extends TupleScheme<getCountFromQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountFromQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountFromQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class textSearch_args implements org.apache.thrift.TBase<textSearch_args, textSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<textSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textSearch_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new textSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new textSearch_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public String searchText; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      SEARCH_TEXT((short)2, "searchText"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textSearch_args.class, metaDataMap);
    }

    public textSearch_args() {
    }

    public textSearch_args(
      String collectionName,
      String searchText,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.searchText = searchText;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public textSearch_args(textSearch_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public textSearch_args deepCopy() {
      return new textSearch_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.searchText = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public textSearch_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public String getSearchText() {
      return this.searchText;
    }

    public textSearch_args setSearchText(String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public textSearch_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case SEARCH_TEXT:
        return getSearchText();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case SEARCH_TEXT:
        return isSetSearchText();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof textSearch_args)
        return this.equals((textSearch_args)that);
      return false;
    }

    public boolean equals(textSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_searchText = true && (isSetSearchText());
      builder.append(present_searchText);
      if (present_searchText)
        builder.append(searchText);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(textSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchText()).compareTo(other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("textSearch_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class textSearch_argsStandardSchemeFactory implements SchemeFactory {
      public textSearch_argsStandardScheme getScheme() {
        return new textSearch_argsStandardScheme();
      }
    }

    private static class textSearch_argsStandardScheme extends StandardScheme<textSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, textSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, textSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class textSearch_argsTupleSchemeFactory implements SchemeFactory {
      public textSearch_argsTupleScheme getScheme() {
        return new textSearch_argsTupleScheme();
      }
    }

    private static class textSearch_argsTupleScheme extends TupleScheme<textSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, textSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetSearchText()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, textSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class textSearch_result implements org.apache.thrift.TBase<textSearch_result, textSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<textSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new textSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new textSearch_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textSearch_result.class, metaDataMap);
    }

    public textSearch_result() {
    }

    public textSearch_result(
      List<String> success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public textSearch_result(textSearch_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public textSearch_result deepCopy() {
      return new textSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ezMongoBaseException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public textSearch_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public textSearch_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof textSearch_result)
        return this.equals((textSearch_result)that);
      return false;
    }

    public boolean equals(textSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(textSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("textSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class textSearch_resultStandardSchemeFactory implements SchemeFactory {
      public textSearch_resultStandardScheme getScheme() {
        return new textSearch_resultStandardScheme();
      }
    }

    private static class textSearch_resultStandardScheme extends StandardScheme<textSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, textSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, textSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class textSearch_resultTupleSchemeFactory implements SchemeFactory {
      public textSearch_resultTupleScheme getScheme() {
        return new textSearch_resultTupleScheme();
      }
    }

    private static class textSearch_resultTupleScheme extends TupleScheme<textSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, textSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, textSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class find_args implements org.apache.thrift.TBase<find_args, find_args._Fields>, java.io.Serializable, Cloneable, Comparable<find_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MONGO_FIND_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoFindParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new find_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new find_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public MongoFindParams mongoFindParams; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      MONGO_FIND_PARAMS((short)2, "mongoFindParams"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // MONGO_FIND_PARAMS
            return MONGO_FIND_PARAMS;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONGO_FIND_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("mongoFindParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MongoFindParams.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_args.class, metaDataMap);
    }

    public find_args() {
    }

    public find_args(
      String collectionName,
      MongoFindParams mongoFindParams,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.mongoFindParams = mongoFindParams;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_args(find_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetMongoFindParams()) {
        this.mongoFindParams = new MongoFindParams(other.mongoFindParams);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public find_args deepCopy() {
      return new find_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.mongoFindParams = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public find_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public MongoFindParams getMongoFindParams() {
      return this.mongoFindParams;
    }

    public find_args setMongoFindParams(MongoFindParams mongoFindParams) {
      this.mongoFindParams = mongoFindParams;
      return this;
    }

    public void unsetMongoFindParams() {
      this.mongoFindParams = null;
    }

    /** Returns true if field mongoFindParams is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoFindParams() {
      return this.mongoFindParams != null;
    }

    public void setMongoFindParamsIsSet(boolean value) {
      if (!value) {
        this.mongoFindParams = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public find_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case MONGO_FIND_PARAMS:
        if (value == null) {
          unsetMongoFindParams();
        } else {
          setMongoFindParams((MongoFindParams)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case MONGO_FIND_PARAMS:
        return getMongoFindParams();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case MONGO_FIND_PARAMS:
        return isSetMongoFindParams();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof find_args)
        return this.equals((find_args)that);
      return false;
    }

    public boolean equals(find_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_mongoFindParams = true && this.isSetMongoFindParams();
      boolean that_present_mongoFindParams = true && that.isSetMongoFindParams();
      if (this_present_mongoFindParams || that_present_mongoFindParams) {
        if (!(this_present_mongoFindParams && that_present_mongoFindParams))
          return false;
        if (!this.mongoFindParams.equals(that.mongoFindParams))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_mongoFindParams = true && (isSetMongoFindParams());
      builder.append(present_mongoFindParams);
      if (present_mongoFindParams)
        builder.append(mongoFindParams);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(find_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMongoFindParams()).compareTo(other.isSetMongoFindParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMongoFindParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoFindParams, other.mongoFindParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("find_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mongoFindParams:");
      if (this.mongoFindParams == null) {
        sb.append("null");
      } else {
        sb.append(this.mongoFindParams);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mongoFindParams != null) {
        mongoFindParams.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_argsStandardSchemeFactory implements SchemeFactory {
      public find_argsStandardScheme getScheme() {
        return new find_argsStandardScheme();
      }
    }

    private static class find_argsStandardScheme extends StandardScheme<find_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MONGO_FIND_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mongoFindParams = new MongoFindParams();
                struct.mongoFindParams.read(iprot);
                struct.setMongoFindParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.mongoFindParams != null) {
          oprot.writeFieldBegin(MONGO_FIND_PARAMS_FIELD_DESC);
          struct.mongoFindParams.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_argsTupleSchemeFactory implements SchemeFactory {
      public find_argsTupleScheme getScheme() {
        return new find_argsTupleScheme();
      }
    }

    private static class find_argsTupleScheme extends TupleScheme<find_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetMongoFindParams()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetMongoFindParams()) {
          struct.mongoFindParams.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mongoFindParams = new MongoFindParams();
          struct.mongoFindParams.read(iprot);
          struct.setMongoFindParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class find_result implements org.apache.thrift.TBase<find_result, find_result._Fields>, java.io.Serializable, Cloneable, Comparable<find_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new find_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new find_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_result.class, metaDataMap);
    }

    public find_result() {
    }

    public find_result(
      List<String> success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_result(find_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public find_result deepCopy() {
      return new find_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ezMongoBaseException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public find_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public find_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof find_result)
        return this.equals((find_result)that);
      return false;
    }

    public boolean equals(find_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(find_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("find_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_resultStandardSchemeFactory implements SchemeFactory {
      public find_resultStandardScheme getScheme() {
        return new find_resultStandardScheme();
      }
    }

    private static class find_resultStandardScheme extends StandardScheme<find_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_resultTupleSchemeFactory implements SchemeFactory {
      public find_resultTupleScheme getScheme() {
        return new find_resultTupleScheme();
      }
    }

    private static class find_resultTupleScheme extends TupleScheme<find_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class distinct_args implements org.apache.thrift.TBase<distinct_args, distinct_args._Fields>, java.io.Serializable, Cloneable, Comparable<distinct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MONGO_DISTINCT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoDistinctParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new distinct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new distinct_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public MongoDistinctParams mongoDistinctParams; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      MONGO_DISTINCT_PARAMS((short)2, "mongoDistinctParams"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // MONGO_DISTINCT_PARAMS
            return MONGO_DISTINCT_PARAMS;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONGO_DISTINCT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("mongoDistinctParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MongoDistinctParams.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct_args.class, metaDataMap);
    }

    public distinct_args() {
    }

    public distinct_args(
      String collectionName,
      MongoDistinctParams mongoDistinctParams,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.mongoDistinctParams = mongoDistinctParams;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public distinct_args(distinct_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetMongoDistinctParams()) {
        this.mongoDistinctParams = new MongoDistinctParams(other.mongoDistinctParams);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public distinct_args deepCopy() {
      return new distinct_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.mongoDistinctParams = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public distinct_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public MongoDistinctParams getMongoDistinctParams() {
      return this.mongoDistinctParams;
    }

    public distinct_args setMongoDistinctParams(MongoDistinctParams mongoDistinctParams) {
      this.mongoDistinctParams = mongoDistinctParams;
      return this;
    }

    public void unsetMongoDistinctParams() {
      this.mongoDistinctParams = null;
    }

    /** Returns true if field mongoDistinctParams is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoDistinctParams() {
      return this.mongoDistinctParams != null;
    }

    public void setMongoDistinctParamsIsSet(boolean value) {
      if (!value) {
        this.mongoDistinctParams = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public distinct_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case MONGO_DISTINCT_PARAMS:
        if (value == null) {
          unsetMongoDistinctParams();
        } else {
          setMongoDistinctParams((MongoDistinctParams)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case MONGO_DISTINCT_PARAMS:
        return getMongoDistinctParams();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case MONGO_DISTINCT_PARAMS:
        return isSetMongoDistinctParams();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof distinct_args)
        return this.equals((distinct_args)that);
      return false;
    }

    public boolean equals(distinct_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_mongoDistinctParams = true && this.isSetMongoDistinctParams();
      boolean that_present_mongoDistinctParams = true && that.isSetMongoDistinctParams();
      if (this_present_mongoDistinctParams || that_present_mongoDistinctParams) {
        if (!(this_present_mongoDistinctParams && that_present_mongoDistinctParams))
          return false;
        if (!this.mongoDistinctParams.equals(that.mongoDistinctParams))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_mongoDistinctParams = true && (isSetMongoDistinctParams());
      builder.append(present_mongoDistinctParams);
      if (present_mongoDistinctParams)
        builder.append(mongoDistinctParams);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(distinct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMongoDistinctParams()).compareTo(other.isSetMongoDistinctParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMongoDistinctParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoDistinctParams, other.mongoDistinctParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("distinct_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mongoDistinctParams:");
      if (this.mongoDistinctParams == null) {
        sb.append("null");
      } else {
        sb.append(this.mongoDistinctParams);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mongoDistinctParams != null) {
        mongoDistinctParams.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class distinct_argsStandardSchemeFactory implements SchemeFactory {
      public distinct_argsStandardScheme getScheme() {
        return new distinct_argsStandardScheme();
      }
    }

    private static class distinct_argsStandardScheme extends StandardScheme<distinct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, distinct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MONGO_DISTINCT_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mongoDistinctParams = new MongoDistinctParams();
                struct.mongoDistinctParams.read(iprot);
                struct.setMongoDistinctParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, distinct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.mongoDistinctParams != null) {
          oprot.writeFieldBegin(MONGO_DISTINCT_PARAMS_FIELD_DESC);
          struct.mongoDistinctParams.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class distinct_argsTupleSchemeFactory implements SchemeFactory {
      public distinct_argsTupleScheme getScheme() {
        return new distinct_argsTupleScheme();
      }
    }

    private static class distinct_argsTupleScheme extends TupleScheme<distinct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, distinct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetMongoDistinctParams()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetMongoDistinctParams()) {
          struct.mongoDistinctParams.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, distinct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mongoDistinctParams = new MongoDistinctParams();
          struct.mongoDistinctParams.read(iprot);
          struct.setMongoDistinctParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class distinct_result implements org.apache.thrift.TBase<distinct_result, distinct_result._Fields>, java.io.Serializable, Cloneable, Comparable<distinct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new distinct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new distinct_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct_result.class, metaDataMap);
    }

    public distinct_result() {
    }

    public distinct_result(
      List<String> success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public distinct_result(distinct_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public distinct_result deepCopy() {
      return new distinct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ezMongoBaseException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public distinct_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public distinct_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof distinct_result)
        return this.equals((distinct_result)that);
      return false;
    }

    public boolean equals(distinct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(distinct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("distinct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class distinct_resultStandardSchemeFactory implements SchemeFactory {
      public distinct_resultStandardScheme getScheme() {
        return new distinct_resultStandardScheme();
      }
    }

    private static class distinct_resultStandardScheme extends StandardScheme<distinct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, distinct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    String _elem26;
                    _elem26 = iprot.readString();
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, distinct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class distinct_resultTupleSchemeFactory implements SchemeFactory {
      public distinct_resultTupleScheme getScheme() {
        return new distinct_resultTupleScheme();
      }
    }

    private static class distinct_resultTupleScheme extends TupleScheme<distinct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, distinct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, distinct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31;
              _elem31 = iprot.readString();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class insert_args implements org.apache.thrift.TBase<insert_args, insert_args._Fields>, java.io.Serializable, Cloneable, Comparable<insert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MONGO_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoDocument", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public MongoEzbakeDocument mongoDocument; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      MONGO_DOCUMENT((short)2, "mongoDocument"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // MONGO_DOCUMENT
            return MONGO_DOCUMENT;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONGO_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("mongoDocument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MongoEzbakeDocument.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_args.class, metaDataMap);
    }

    public insert_args() {
    }

    public insert_args(
      String collectionName,
      MongoEzbakeDocument mongoDocument,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.mongoDocument = mongoDocument;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_args(insert_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetMongoDocument()) {
        this.mongoDocument = new MongoEzbakeDocument(other.mongoDocument);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public insert_args deepCopy() {
      return new insert_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.mongoDocument = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public insert_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public MongoEzbakeDocument getMongoDocument() {
      return this.mongoDocument;
    }

    public insert_args setMongoDocument(MongoEzbakeDocument mongoDocument) {
      this.mongoDocument = mongoDocument;
      return this;
    }

    public void unsetMongoDocument() {
      this.mongoDocument = null;
    }

    /** Returns true if field mongoDocument is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoDocument() {
      return this.mongoDocument != null;
    }

    public void setMongoDocumentIsSet(boolean value) {
      if (!value) {
        this.mongoDocument = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public insert_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case MONGO_DOCUMENT:
        if (value == null) {
          unsetMongoDocument();
        } else {
          setMongoDocument((MongoEzbakeDocument)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case MONGO_DOCUMENT:
        return getMongoDocument();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case MONGO_DOCUMENT:
        return isSetMongoDocument();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_args)
        return this.equals((insert_args)that);
      return false;
    }

    public boolean equals(insert_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_mongoDocument = true && this.isSetMongoDocument();
      boolean that_present_mongoDocument = true && that.isSetMongoDocument();
      if (this_present_mongoDocument || that_present_mongoDocument) {
        if (!(this_present_mongoDocument && that_present_mongoDocument))
          return false;
        if (!this.mongoDocument.equals(that.mongoDocument))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_mongoDocument = true && (isSetMongoDocument());
      builder.append(present_mongoDocument);
      if (present_mongoDocument)
        builder.append(mongoDocument);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(insert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMongoDocument()).compareTo(other.isSetMongoDocument());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMongoDocument()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoDocument, other.mongoDocument);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mongoDocument:");
      if (this.mongoDocument == null) {
        sb.append("null");
      } else {
        sb.append(this.mongoDocument);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mongoDocument != null) {
        mongoDocument.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_argsStandardSchemeFactory implements SchemeFactory {
      public insert_argsStandardScheme getScheme() {
        return new insert_argsStandardScheme();
      }
    }

    private static class insert_argsStandardScheme extends StandardScheme<insert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MONGO_DOCUMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mongoDocument = new MongoEzbakeDocument();
                struct.mongoDocument.read(iprot);
                struct.setMongoDocumentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.mongoDocument != null) {
          oprot.writeFieldBegin(MONGO_DOCUMENT_FIELD_DESC);
          struct.mongoDocument.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_argsTupleSchemeFactory implements SchemeFactory {
      public insert_argsTupleScheme getScheme() {
        return new insert_argsTupleScheme();
      }
    }

    private static class insert_argsTupleScheme extends TupleScheme<insert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetMongoDocument()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetMongoDocument()) {
          struct.mongoDocument.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mongoDocument = new MongoEzbakeDocument();
          struct.mongoDocument.read(iprot);
          struct.setMongoDocumentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class insert_result implements org.apache.thrift.TBase<insert_result, insert_result._Fields>, java.io.Serializable, Cloneable, Comparable<insert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_resultTupleSchemeFactory());
    }

    public String success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_result.class, metaDataMap);
    }

    public insert_result() {
    }

    public insert_result(
      String success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_result(insert_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public insert_result deepCopy() {
      return new insert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ezMongoBaseException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public insert_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public insert_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_result)
        return this.equals((insert_result)that);
      return false;
    }

    public boolean equals(insert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(insert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_resultStandardSchemeFactory implements SchemeFactory {
      public insert_resultStandardScheme getScheme() {
        return new insert_resultStandardScheme();
      }
    }

    private static class insert_resultStandardScheme extends StandardScheme<insert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_resultTupleSchemeFactory implements SchemeFactory {
      public insert_resultTupleScheme getScheme() {
        return new insert_resultTupleScheme();
      }
    }

    private static class insert_resultTupleScheme extends TupleScheme<insert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MONGO_UPDATE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("mongoUpdateParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public MongoUpdateParams mongoUpdateParams; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      MONGO_UPDATE_PARAMS((short)2, "mongoUpdateParams"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // MONGO_UPDATE_PARAMS
            return MONGO_UPDATE_PARAMS;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONGO_UPDATE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("mongoUpdateParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MongoUpdateParams.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String collectionName,
      MongoUpdateParams mongoUpdateParams,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.mongoUpdateParams = mongoUpdateParams;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetMongoUpdateParams()) {
        this.mongoUpdateParams = new MongoUpdateParams(other.mongoUpdateParams);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.mongoUpdateParams = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public update_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public MongoUpdateParams getMongoUpdateParams() {
      return this.mongoUpdateParams;
    }

    public update_args setMongoUpdateParams(MongoUpdateParams mongoUpdateParams) {
      this.mongoUpdateParams = mongoUpdateParams;
      return this;
    }

    public void unsetMongoUpdateParams() {
      this.mongoUpdateParams = null;
    }

    /** Returns true if field mongoUpdateParams is set (has been assigned a value) and false otherwise */
    public boolean isSetMongoUpdateParams() {
      return this.mongoUpdateParams != null;
    }

    public void setMongoUpdateParamsIsSet(boolean value) {
      if (!value) {
        this.mongoUpdateParams = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public update_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case MONGO_UPDATE_PARAMS:
        if (value == null) {
          unsetMongoUpdateParams();
        } else {
          setMongoUpdateParams((MongoUpdateParams)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case MONGO_UPDATE_PARAMS:
        return getMongoUpdateParams();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case MONGO_UPDATE_PARAMS:
        return isSetMongoUpdateParams();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_mongoUpdateParams = true && this.isSetMongoUpdateParams();
      boolean that_present_mongoUpdateParams = true && that.isSetMongoUpdateParams();
      if (this_present_mongoUpdateParams || that_present_mongoUpdateParams) {
        if (!(this_present_mongoUpdateParams && that_present_mongoUpdateParams))
          return false;
        if (!this.mongoUpdateParams.equals(that.mongoUpdateParams))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_mongoUpdateParams = true && (isSetMongoUpdateParams());
      builder.append(present_mongoUpdateParams);
      if (present_mongoUpdateParams)
        builder.append(mongoUpdateParams);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMongoUpdateParams()).compareTo(other.isSetMongoUpdateParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMongoUpdateParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mongoUpdateParams, other.mongoUpdateParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mongoUpdateParams:");
      if (this.mongoUpdateParams == null) {
        sb.append("null");
      } else {
        sb.append(this.mongoUpdateParams);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mongoUpdateParams != null) {
        mongoUpdateParams.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MONGO_UPDATE_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mongoUpdateParams = new MongoUpdateParams();
                struct.mongoUpdateParams.read(iprot);
                struct.setMongoUpdateParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.mongoUpdateParams != null) {
          oprot.writeFieldBegin(MONGO_UPDATE_PARAMS_FIELD_DESC);
          struct.mongoUpdateParams.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetMongoUpdateParams()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetMongoUpdateParams()) {
          struct.mongoUpdateParams.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mongoUpdateParams = new MongoUpdateParams();
          struct.mongoUpdateParams.read(iprot);
          struct.setMongoUpdateParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }

    public int success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      int success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ezMongoBaseException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public update_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

  public static class remove_args implements org.apache.thrift.TBase<remove_args, remove_args._Fields>, java.io.Serializable, Cloneable, Comparable<remove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonQuery", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_argsTupleSchemeFactory());
    }

    public String collectionName; // required
    public String jsonQuery; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_NAME((short)1, "collectionName"),
      JSON_QUERY((short)2, "jsonQuery"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_NAME
            return COLLECTION_NAME;
          case 2: // JSON_QUERY
            return JSON_QUERY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_QUERY, new org.apache.thrift.meta_data.FieldMetaData("jsonQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_args.class, metaDataMap);
    }

    public remove_args() {
    }

    public remove_args(
      String collectionName,
      String jsonQuery,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.collectionName = collectionName;
      this.jsonQuery = jsonQuery;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_args(remove_args other) {
      if (other.isSetCollectionName()) {
        this.collectionName = other.collectionName;
      }
      if (other.isSetJsonQuery()) {
        this.jsonQuery = other.jsonQuery;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public remove_args deepCopy() {
      return new remove_args(this);
    }

    @Override
    public void clear() {
      this.collectionName = null;
      this.jsonQuery = null;
      this.security = null;
    }

    public String getCollectionName() {
      return this.collectionName;
    }

    public remove_args setCollectionName(String collectionName) {
      this.collectionName = collectionName;
      return this;
    }

    public void unsetCollectionName() {
      this.collectionName = null;
    }

    /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionName() {
      return this.collectionName != null;
    }

    public void setCollectionNameIsSet(boolean value) {
      if (!value) {
        this.collectionName = null;
      }
    }

    public String getJsonQuery() {
      return this.jsonQuery;
    }

    public remove_args setJsonQuery(String jsonQuery) {
      this.jsonQuery = jsonQuery;
      return this;
    }

    public void unsetJsonQuery() {
      this.jsonQuery = null;
    }

    /** Returns true if field jsonQuery is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonQuery() {
      return this.jsonQuery != null;
    }

    public void setJsonQueryIsSet(boolean value) {
      if (!value) {
        this.jsonQuery = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public remove_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_NAME:
        if (value == null) {
          unsetCollectionName();
        } else {
          setCollectionName((String)value);
        }
        break;

      case JSON_QUERY:
        if (value == null) {
          unsetJsonQuery();
        } else {
          setJsonQuery((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_NAME:
        return getCollectionName();

      case JSON_QUERY:
        return getJsonQuery();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_NAME:
        return isSetCollectionName();
      case JSON_QUERY:
        return isSetJsonQuery();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_args)
        return this.equals((remove_args)that);
      return false;
    }

    public boolean equals(remove_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionName = true && this.isSetCollectionName();
      boolean that_present_collectionName = true && that.isSetCollectionName();
      if (this_present_collectionName || that_present_collectionName) {
        if (!(this_present_collectionName && that_present_collectionName))
          return false;
        if (!this.collectionName.equals(that.collectionName))
          return false;
      }

      boolean this_present_jsonQuery = true && this.isSetJsonQuery();
      boolean that_present_jsonQuery = true && that.isSetJsonQuery();
      if (this_present_jsonQuery || that_present_jsonQuery) {
        if (!(this_present_jsonQuery && that_present_jsonQuery))
          return false;
        if (!this.jsonQuery.equals(that.jsonQuery))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_collectionName = true && (isSetCollectionName());
      builder.append(present_collectionName);
      if (present_collectionName)
        builder.append(collectionName);

      boolean present_jsonQuery = true && (isSetJsonQuery());
      builder.append(present_jsonQuery);
      if (present_jsonQuery)
        builder.append(jsonQuery);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(other.isSetCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, other.collectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonQuery()).compareTo(other.isSetJsonQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonQuery, other.jsonQuery);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_args(");
      boolean first = true;

      sb.append("collectionName:");
      if (this.collectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonQuery:");
      if (this.jsonQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonQuery);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_argsStandardSchemeFactory implements SchemeFactory {
      public remove_argsStandardScheme getScheme() {
        return new remove_argsStandardScheme();
      }
    }

    private static class remove_argsStandardScheme extends StandardScheme<remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collectionName = iprot.readString();
                struct.setCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonQuery = iprot.readString();
                struct.setJsonQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionName != null) {
          oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.collectionName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonQuery != null) {
          oprot.writeFieldBegin(JSON_QUERY_FIELD_DESC);
          oprot.writeString(struct.jsonQuery);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_argsTupleSchemeFactory implements SchemeFactory {
      public remove_argsTupleScheme getScheme() {
        return new remove_argsTupleScheme();
      }
    }

    private static class remove_argsTupleScheme extends TupleScheme<remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionName()) {
          optionals.set(0);
        }
        if (struct.isSetJsonQuery()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCollectionName()) {
          oprot.writeString(struct.collectionName);
        }
        if (struct.isSetJsonQuery()) {
          oprot.writeString(struct.jsonQuery);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.collectionName = iprot.readString();
          struct.setCollectionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonQuery = iprot.readString();
          struct.setJsonQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class remove_result implements org.apache.thrift.TBase<remove_result, remove_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EZ_MONGO_BASE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ezMongoBaseException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_resultTupleSchemeFactory());
    }

    public int success; // required
    public EzMongoBaseException ezMongoBaseException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EZ_MONGO_BASE_EXCEPTION((short)1, "ezMongoBaseException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EZ_MONGO_BASE_EXCEPTION
            return EZ_MONGO_BASE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EZ_MONGO_BASE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ezMongoBaseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_result.class, metaDataMap);
    }

    public remove_result() {
    }

    public remove_result(
      int success,
      EzMongoBaseException ezMongoBaseException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ezMongoBaseException = ezMongoBaseException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_result(remove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEzMongoBaseException()) {
        this.ezMongoBaseException = new EzMongoBaseException(other.ezMongoBaseException);
      }
    }

    public remove_result deepCopy() {
      return new remove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ezMongoBaseException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public remove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public EzMongoBaseException getEzMongoBaseException() {
      return this.ezMongoBaseException;
    }

    public remove_result setEzMongoBaseException(EzMongoBaseException ezMongoBaseException) {
      this.ezMongoBaseException = ezMongoBaseException;
      return this;
    }

    public void unsetEzMongoBaseException() {
      this.ezMongoBaseException = null;
    }

    /** Returns true if field ezMongoBaseException is set (has been assigned a value) and false otherwise */
    public boolean isSetEzMongoBaseException() {
      return this.ezMongoBaseException != null;
    }

    public void setEzMongoBaseExceptionIsSet(boolean value) {
      if (!value) {
        this.ezMongoBaseException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EZ_MONGO_BASE_EXCEPTION:
        if (value == null) {
          unsetEzMongoBaseException();
        } else {
          setEzMongoBaseException((EzMongoBaseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EZ_MONGO_BASE_EXCEPTION:
        return getEzMongoBaseException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EZ_MONGO_BASE_EXCEPTION:
        return isSetEzMongoBaseException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_result)
        return this.equals((remove_result)that);
      return false;
    }

    public boolean equals(remove_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ezMongoBaseException = true && this.isSetEzMongoBaseException();
      boolean that_present_ezMongoBaseException = true && that.isSetEzMongoBaseException();
      if (this_present_ezMongoBaseException || that_present_ezMongoBaseException) {
        if (!(this_present_ezMongoBaseException && that_present_ezMongoBaseException))
          return false;
        if (!this.ezMongoBaseException.equals(that.ezMongoBaseException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ezMongoBaseException = true && (isSetEzMongoBaseException());
      builder.append(present_ezMongoBaseException);
      if (present_ezMongoBaseException)
        builder.append(ezMongoBaseException);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEzMongoBaseException()).compareTo(other.isSetEzMongoBaseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEzMongoBaseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ezMongoBaseException, other.ezMongoBaseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ezMongoBaseException:");
      if (this.ezMongoBaseException == null) {
        sb.append("null");
      } else {
        sb.append(this.ezMongoBaseException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_resultStandardSchemeFactory implements SchemeFactory {
      public remove_resultStandardScheme getScheme() {
        return new remove_resultStandardScheme();
      }
    }

    private static class remove_resultStandardScheme extends StandardScheme<remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EZ_MONGO_BASE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ezMongoBaseException = new EzMongoBaseException();
                struct.ezMongoBaseException.read(iprot);
                struct.setEzMongoBaseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ezMongoBaseException != null) {
          oprot.writeFieldBegin(EZ_MONGO_BASE_EXCEPTION_FIELD_DESC);
          struct.ezMongoBaseException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_resultTupleSchemeFactory implements SchemeFactory {
      public remove_resultTupleScheme getScheme() {
        return new remove_resultTupleScheme();
      }
    }

    private static class remove_resultTupleScheme extends TupleScheme<remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEzMongoBaseException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEzMongoBaseException()) {
          struct.ezMongoBaseException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ezMongoBaseException = new EzMongoBaseException();
          struct.ezMongoBaseException.read(iprot);
          struct.setEzMongoBaseExceptionIsSet(true);
        }
      }
    }

  }

}
